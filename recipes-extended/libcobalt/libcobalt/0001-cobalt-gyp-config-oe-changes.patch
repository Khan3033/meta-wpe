diff --git a/src/third_party/starboard/wpe/brcm/arm/gyp_configuration.py b/src/third_party/starboard/wpe/brcm/arm/gyp_configuration.py
index 7d01610db..8ab912cb3 100644
--- a/src/third_party/starboard/wpe/brcm/arm/gyp_configuration.py
+++ b/src/third_party/starboard/wpe/brcm/arm/gyp_configuration.py
@@ -14,7 +14,6 @@
 """Starboard Raspberry Pi platform configuration."""
 
 import os
-
 from starboard.build import clang
 from starboard.build import platform_configuration
 from starboard.tools import build
@@ -25,6 +24,8 @@ from starboard.tools.testing import test_filter
 # will show up in an error message when that fails.
 _UNDEFINED_BUILDROOT_HOME = '/UNDEFINED/BUILDROOT_HOME'
 
+_UNDEFINED_COBALT_STAGING_DIR = '/UNDEFINED/COBALT_STAGING_DIR'
+_UNDEFINED_COBALT_TOOLCHAIN_PREFIX = '/UNDEFINED/COBALT_TOOLCHAIN_PREFIX'
 
 class WpePlatformConfig(platform_configuration.PlatformConfiguration):
   """Starboard WPE BRCM ARM platform configuration."""
@@ -32,8 +33,15 @@ class WpePlatformConfig(platform_configuration.PlatformConfiguration):
   def __init__(self, platform):
     super(WpePlatformConfig, self).__init__(platform)
     self.AppendApplicationConfigurationPath(os.path.dirname(__file__))
-    self.buildroot_home = os.environ.get('BUILDROOT_HOME', _UNDEFINED_BUILDROOT_HOME)
-    self.sysroot = os.path.realpath(os.path.join(self.buildroot_home, 'arm-buildroot-linux-gnueabihf/sysroot'))
+    self.build_home = os.environ.get('BUILDROOT_HOME', _UNDEFINED_BUILDROOT_HOME)
+    if self.build_home != _UNDEFINED_BUILDROOT_HOME:
+      self.sysroot = os.path.realpath(os.path.join(self.build_home, 'arm-buildroot-linux-gnueabihf/sysroot'))
+      self.toolchain = 'arm-buildroot-linux-gnueabihf-'
+    else:
+      self.build_home = os.environ.get('COBALT_STAGING_DIR', _UNDEFINED_COBALT_STAGING_DIR)
+      if self.build_home != _UNDEFINED_COBALT_STAGING_DIR:
+        self.sysroot = os.path.realpath(os.path.join(self.build_home, ''))
+        self.toolchain = os.environ.get('COBALT_TOOLCHAIN_PREFIX', _UNDEFINED_COBALT_TOOLCHAIN_PREFIX)
 
   def GetBuildFormat(self):
     """Returns the desired build format."""
@@ -60,27 +68,28 @@ class WpePlatformConfig(platform_configuration.PlatformConfiguration):
 
   def GetEnvironmentVariables(self):
     env_variables = {}
-    toolchain = os.path.realpath(
-        os.path.join(
-            self.buildroot_home,
-            '.'))
-    toolchain_bin_dir = os.path.join(toolchain, 'bin')
+    if self.build_home != _UNDEFINED_BUILDROOT_HOME:
+        toolchain = os.path.realpath(
+            os.path.join(
+                self.build_home,
+                '.'))
+        toolchain_bin_dir = os.path.join(toolchain, 'bin')
+
     env_variables.update({
-        'CC': os.path.join(toolchain_bin_dir, 'arm-buildroot-linux-gnueabihf-gcc'),
-        'CXX': os.path.join(toolchain_bin_dir, 'arm-buildroot-linux-gnueabihf-g++'),
+        'CC': os.path.join(toolchain_bin_dir, self.toolchain + 'gcc'),
+        'CXX': os.path.join(toolchain_bin_dir, self.toolchain + 'g++'),
         'CC_host': 'gcc -m32',
         'CXX_host': 'g++ -m32',
     })
-
     return env_variables
 
   def SetupPlatformTools(self, build_number):
     # Nothing to setup, but validate that BUILDROOT_HOME is correct.
-    if self.buildroot_home == _UNDEFINED_BUILDROOT_HOME:
-      raise RuntimeError('Wpe builds require the "BUILDROOT_HOME" '
+    if self.build_home == _UNDEFINED_BUILDROOT_HOME and self.build_home == _UNDEFINED_COBALT_STAGING_DIR:
+      raise RuntimeError('Wpe builds require the "BUILDROOT_HOME or COBALT_STAGING_DIR" '
                          'environment variable to be set.')
     if not os.path.isdir(self.sysroot):
-      raise RuntimeError('Wpe builds require $BUILDROOT_HOME/sysroot '
+      raise RuntimeError('Wpe builds require $BUILDROOT_HOME or COBALT_STAGING_DIR sysroot '
                          'to be a valid directory.')
 
   def GetLauncherPath(self):
diff --git a/src/third_party/starboard/wpe/rpi/gyp_configuration.py b/src/third_party/starboard/wpe/rpi/gyp_configuration.py
index b6bc74295..3973183cb 100644
--- a/src/third_party/starboard/wpe/rpi/gyp_configuration.py
+++ b/src/third_party/starboard/wpe/rpi/gyp_configuration.py
@@ -14,7 +14,6 @@
 """Starboard Raspberry Pi platform configuration."""
 
 import os
-
 from starboard.build import clang
 from starboard.build import platform_configuration
 from starboard.tools import build
@@ -25,6 +24,8 @@ from starboard.tools.testing import test_filter
 # will show up in an error message when that fails.
 _UNDEFINED_BUILDROOT_HOME = '/UNDEFINED/BUILDROOT_HOME'
 
+_UNDEFINED_COBALT_STAGING_DIR = '/UNDEFINED/COBALT_STAGING_DIR'
+_UNDEFINED_COBALT_TOOLCHAIN_PREFIX = '/UNDEFINED/COBALT_TOOLCHAIN_PREFIX'
 
 class WpePlatformConfig(platform_configuration.PlatformConfiguration):
   """Starboard Raspberry Pi platform configuration."""
@@ -32,8 +33,15 @@ class WpePlatformConfig(platform_configuration.PlatformConfiguration):
   def __init__(self, platform):
     super(WpePlatformConfig, self).__init__(platform)
     self.AppendApplicationConfigurationPath(os.path.dirname(__file__))
-    self.buildroot_home = os.environ.get('BUILDROOT_HOME', _UNDEFINED_BUILDROOT_HOME)
-    self.sysroot = os.path.realpath(os.path.join(self.buildroot_home, 'arm-buildroot-linux-gnueabihf/sysroot'))
+    self.build_home = os.environ.get('BUILDROOT_HOME', _UNDEFINED_BUILDROOT_HOME)
+    if self.build_home != _UNDEFINED_BUILDROOT_HOME:
+      self.sysroot = os.path.realpath(os.path.join(self.build_home, 'arm-buildroot-linux-gnueabihf/sysroot'))
+      self.toolchain = 'arm-buildroot-linux-gnueabihf-'
+    else:
+      self.build_home = os.environ.get('COBALT_STAGING_DIR', _UNDEFINED_COBALT_STAGING_DIR)
+      if self.build_home != _UNDEFINED_COBALT_STAGING_DIR:
+        self.sysroot = os.path.realpath(os.path.join(self.build_home, ''))
+        self.toolchain = os.environ.get('COBALT_TOOLCHAIN_PREFIX', _UNDEFINED_COBALT_TOOLCHAIN_PREFIX)
 
   def GetBuildFormat(self):
     """Returns the desired build format."""
@@ -60,27 +68,28 @@ class WpePlatformConfig(platform_configuration.PlatformConfiguration):
 
   def GetEnvironmentVariables(self):
     env_variables = {}
-    toolchain = os.path.realpath(
-        os.path.join(
-            self.buildroot_home,
-            '.'))
-    toolchain_bin_dir = os.path.join(toolchain, 'bin')
+    if self.build_home != _UNDEFINED_BUILDROOT_HOME:
+        toolchain = os.path.realpath(
+            os.path.join(
+                self.build_home,
+                '.'))
+        toolchain_bin_dir = os.path.join(toolchain, 'bin')
+
     env_variables.update({
-        'CC': os.path.join(toolchain_bin_dir, 'arm-buildroot-linux-gnueabihf-gcc'),
-        'CXX': os.path.join(toolchain_bin_dir, 'arm-buildroot-linux-gnueabihf-g++'),
+        'CC': os.path.join(toolchain_bin_dir, self.toolchain + 'gcc'),
+        'CXX': os.path.join(toolchain_bin_dir, self.toolchain + 'g++'),
         'CC_host': 'gcc -m32',
         'CXX_host': 'g++ -m32',
     })
-
     return env_variables
 
   def SetupPlatformTools(self, build_number):
     # Nothing to setup, but validate that BUILDROOT_HOME is correct.
-    if self.buildroot_home == _UNDEFINED_BUILDROOT_HOME:
-      raise RuntimeError('Wpe builds require the "BUILDROOT_HOME" '
+    if self.build_home == _UNDEFINED_BUILDROOT_HOME and self.build_home == _UNDEFINED_COBALT_STAGING_DIR:
+      raise RuntimeError('Wpe builds require the "BUILDROOT_HOME or COBALT_STAGING_DIR" '
                          'environment variable to be set.')
     if not os.path.isdir(self.sysroot):
-      raise RuntimeError('Wpe builds require $BUILDROOT_HOME/sysroot '
+      raise RuntimeError('Wpe builds require $BUILDROOT_HOME or COBALT_STAGING_DIR sysroot '
                          'to be a valid directory.')
 
   def GetLauncherPath(self):
diff --git a/src/tools/gyp/pylib/gyp/generator/ninja.py b/src/tools/gyp/pylib/gyp/generator/ninja.py
index e2989bf68..5a51fe968 100755
--- a/src/tools/gyp/pylib/gyp/generator/ninja.py
+++ b/src/tools/gyp/pylib/gyp/generator/ninja.py
@@ -2116,7 +2116,8 @@ def GenerateOutputForConfig(target_list, target_dicts, data, params,
     master_ninja.variable('cc', cc)
     cxx = GetEnvironFallback(['CXX_target', 'CXX'], cxx)
     master_ninja.variable('cxx', cxx)
-    ld = GetEnvironFallback(['LD_target', 'LD'], ld)
+    # Use default value for LD
+    # ld = GetEnvironFallback(['LD_target', 'LD'], ld)
     rc = GetEnvironFallback(['RC'], 'rc.exe')
 
     if not cc_host:
