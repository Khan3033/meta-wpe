From bda2a1484b9c80f91450c6e30be02d12d3cb8d15 Mon Sep 17 00:00:00 2001
From: HaseenaSainul <h.sainul@metrological.com>
Date: Mon, 13 May 2019 19:52:41 +0530
Subject: [PATCH 2/2] [Compositor] Client part removed

---
 Compositor/lib/CMakeLists.txt                  |    3 +-
 Compositor/lib/Client/CMakeLists.txt           |    4 -
 Compositor/lib/Client/Nexus                    |    1 -
 Compositor/lib/Client/Wayland                  |    1 -
 Compositor/lib/Client/compositor/Client.h      |   67 --
 Compositor/lib/Nexus/CMakeLists.txt            |    1 -
 Compositor/lib/Nexus/Client/CMakeLists.txt     |   54 --
 Compositor/lib/Nexus/Client/Implementation.cpp |  177 ----
 Compositor/lib/Nexus/Client/Implementation.h   |  160 ----
 Compositor/lib/Nexus/Client/Module.h           |   14 -
 Compositor/lib/RPI/CMakeLists.txt              |    1 -
 Compositor/lib/RPI/Client/CMakeLists.txt       |   49 -
 Compositor/lib/RPI/Client/Implementation.cpp   |  498 ----------
 Compositor/lib/RPI/Client/Module.h             |   22 -
 Compositor/lib/Wayland/CMakeLists.txt          |    1 -
 Compositor/lib/Wayland/Client/CMakeLists.txt   |   87 --
 Compositor/lib/Wayland/Client/Implementation.h |  834 -----------------
 Compositor/lib/Wayland/Client/Module.h         |   14 -
 Compositor/lib/Wayland/Client/Westeros.cpp     | 1167 ------------------------
 19 files changed, 1 insertion(+), 3154 deletions(-)
 delete mode 100644 Compositor/lib/Client/CMakeLists.txt
 delete mode 120000 Compositor/lib/Client/Nexus
 delete mode 120000 Compositor/lib/Client/Wayland
 delete mode 100644 Compositor/lib/Client/compositor/Client.h
 delete mode 100644 Compositor/lib/Nexus/Client/CMakeLists.txt
 delete mode 100644 Compositor/lib/Nexus/Client/Implementation.cpp
 delete mode 100644 Compositor/lib/Nexus/Client/Implementation.h
 delete mode 100644 Compositor/lib/Nexus/Client/Module.h
 delete mode 100644 Compositor/lib/RPI/Client/CMakeLists.txt
 delete mode 100644 Compositor/lib/RPI/Client/Implementation.cpp
 delete mode 100644 Compositor/lib/RPI/Client/Module.h
 delete mode 100644 Compositor/lib/Wayland/Client/CMakeLists.txt
 delete mode 100644 Compositor/lib/Wayland/Client/Implementation.h
 delete mode 100644 Compositor/lib/Wayland/Client/Module.h
 delete mode 100644 Compositor/lib/Wayland/Client/Westeros.cpp

diff --git a/Compositor/lib/CMakeLists.txt b/Compositor/lib/CMakeLists.txt
index 9fabcc3..346a34b 100644
--- a/Compositor/lib/CMakeLists.txt
+++ b/Compositor/lib/CMakeLists.txt
@@ -1,6 +1,5 @@
 add_subdirectory (${PLUGIN_COMPOSITOR_IMPLEMENTATION})
-add_subdirectory (Client)
 
 if(PLUGIN_COMPOSITOR_TEST)
     add_subdirectory (Test)
-endif()
\ No newline at end of file
+endif()
diff --git a/Compositor/lib/Client/CMakeLists.txt b/Compositor/lib/Client/CMakeLists.txt
deleted file mode 100644
index 0aed575..0000000
--- a/Compositor/lib/Client/CMakeLists.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-install(
-	FILES compositor/Client.h 
-        DESTINATION include/${NAMESPACE}/compositor
-)
diff --git a/Compositor/lib/Client/Nexus b/Compositor/lib/Client/Nexus
deleted file mode 120000
index 3f8e4e8..0000000
--- a/Compositor/lib/Client/Nexus
+++ /dev/null
@@ -1 +0,0 @@
-../Nexus/Client/
\ No newline at end of file
diff --git a/Compositor/lib/Client/Wayland b/Compositor/lib/Client/Wayland
deleted file mode 120000
index f644354..0000000
--- a/Compositor/lib/Client/Wayland
+++ /dev/null
@@ -1 +0,0 @@
-../Wayland/Client/
\ No newline at end of file
diff --git a/Compositor/lib/Client/compositor/Client.h b/Compositor/lib/Client/compositor/Client.h
deleted file mode 100644
index e58c061..0000000
--- a/Compositor/lib/Client/compositor/Client.h
+++ /dev/null
@@ -1,67 +0,0 @@
-#ifndef COMPOSITOR_CPP_ABSTRACTION_H
-#define COMPOSITOR_CPP_ABSTRACTION_H
-
-#include <EGL/egl.h>
-#include <EGL/eglext.h>
-
-#if __cplusplus <= 199711L
-#define nullptr NULL
-#endif
-
-namespace WPEFramework {
-namespace Compositor {
-
-    struct IDisplay {
-        struct IKeyboard {
-            virtual ~IKeyboard() {}
-
-            enum state {
-                released = 0,
-                pressed
-            };
-
-            // Lifetime management
-            virtual void AddRef() const = 0;
-            virtual uint32_t Release() const = 0;
-
-            // Methods
-            virtual void KeyMap(const char information[], const uint16_t size) = 0;
-            virtual void Key(const uint32_t key, const state action, const uint32_t time) = 0;
-            virtual void Modifiers(uint32_t depressedMods, uint32_t latchedMods, uint32_t lockedMods, uint32_t group) = 0;
-            virtual void Repeat(int32_t rate, int32_t delay) = 0;
-            virtual void Direct(const uint32_t key, const state action) = 0;
-        };
-        struct ISurface {
-            virtual ~ISurface(){};
-
-            // Lifetime management
-            virtual void AddRef() const = 0;
-            virtual uint32_t Release() const = 0;
-
-            // Methods
-            virtual EGLNativeWindowType Native() const = 0;
-            virtual std::string Name() const = 0;
-            virtual void Keyboard(IKeyboard* keyboard) = 0;
-            virtual int32_t Width() const = 0;
-            virtual int32_t Height() const = 0;
-        };
-
-        static IDisplay* Instance(const std::string& displayName);
-
-        virtual ~IDisplay() {}
-
-        // Lifetime management
-        virtual void AddRef() const = 0;
-        virtual uint32_t Release() const = 0;
-
-        // Methods
-        virtual EGLNativeDisplayType Native() const = 0;
-        virtual const std::string& Name() const = 0;
-        virtual ISurface* Create(const std::string& name, const uint32_t width, const uint32_t height) = 0; //initial position on screen is fullscreen,x and y therefore implicit and 0
-        virtual int Process(const uint32_t data) = 0;
-        virtual int FileDescriptor() const = 0;
-    };
-} // Compositor
-} // WPEFramework
-
-#endif // COMPOSITOR_CPP_ABSTRACTION_H
diff --git a/Compositor/lib/Nexus/CMakeLists.txt b/Compositor/lib/Nexus/CMakeLists.txt
index e3b9e2e..800d629 100644
--- a/Compositor/lib/Nexus/CMakeLists.txt
+++ b/Compositor/lib/Nexus/CMakeLists.txt
@@ -1,3 +1,2 @@
 add_subdirectory (NexusServer)
 add_subdirectory (Compositor)
-add_subdirectory (Client)
diff --git a/Compositor/lib/Nexus/Client/CMakeLists.txt b/Compositor/lib/Nexus/Client/CMakeLists.txt
deleted file mode 100644
index bb17e0d..0000000
--- a/Compositor/lib/Nexus/Client/CMakeLists.txt
+++ /dev/null
@@ -1,54 +0,0 @@
-set(TARGET compositorclient)
-
-message("Setup ${TARGET} v${VERSION}...")
-
-find_package(EGL REQUIRED)
-find_package(${NAMESPACE}Core REQUIRED)
-find_package(${NAMESPACE}VirtualInput REQUIRED)
-find_package(${NAMESPACE}Definitions REQUIRED)
-find_package(NXCLIENT REQUIRED)
-
-add_library(${TARGET} SHARED Implementation.cpp)
-
-target_link_libraries(${TARGET}
-    PRIVATE
-        ${NAMESPACE}Core::${NAMESPACE}Core
-        ${NAMESPACE}VirtualInput::${NAMESPACE}VirtualInput
-        ${NAMESPACE}Definitions::${NAMESPACE}Definitions
-        NXCLIENT::NXCLIENT
-        ${EGL_LIBRARIES}
-        )
-
-target_include_directories(${TARGET}
-    PUBLIC
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../Client>
-        $<INSTALL_INTERFACE:include/${NAMESPACE}>
-    PRIVATE
-        ${EGL_INCLUDE_DIRS})
-
-target_compile_definitions(${TARGET}
-    PRIVATE
-        ${EGL_DEFINITIONS})
-
-set_target_properties(${TARGET} PROPERTIES
-        CXX_STANDARD 11
-        CXX_STANDARD_REQUIRED YES
-        FRAMEWORK FALSE
-        PUBLIC_HEADER "${PUBLIC_HEADERS}"
-        VERSION ${VERSION}
-        SOVERSION ${VERSION_MAJOR}
-        DEFINE_SYMBOL WPEFRAMEWORK_WAYLAND_EGL_CLIENT
-        )
-
-install(
-        TARGETS ${TARGET}  EXPORT ${TARGET}Targets  # for downstream dependencies
-        ARCHIVE DESTINATION lib COMPONENT libs      # static lib
-        LIBRARY DESTINATION lib COMPONENT libs      # shared lib
-        FRAMEWORK DESTINATION bin COMPONENT libs    # for mac
-)
-
-InstallPackageConfig(
-        TARGETS ${TARGET}
-        DESCRIPTION "A compositor implementation wrapper for EGL and key handling.")
-
-InstallCMakeConfig(TARGETS ${TARGET})
diff --git a/Compositor/lib/Nexus/Client/Implementation.cpp b/Compositor/lib/Nexus/Client/Implementation.cpp
deleted file mode 100644
index 5334221..0000000
--- a/Compositor/lib/Nexus/Client/Implementation.cpp
+++ /dev/null
@@ -1,177 +0,0 @@
-#include "Implementation.h"
-
-#include <EGL/eglext.h>
-
-#include <GLES2/gl2.h>
-#include <GLES2/gl2ext.h>
-
-#include <string.h>
-
-#define BACKEND_BCM_NEXUS_NXCLIENT 1
-
-#ifdef BACKEND_BCM_NEXUS_NXCLIENT
-#include <refsw/nxclient.h>
-#endif
-
-#include <virtualinput/virtualinput.h>
-
-// pipe to relay the keys to the display...
-int g_pipefd[2];
-
-struct Message {
-    uint32_t code;
-    actiontype type;
-};
-
-static const char* connectorName = "/tmp/keyhandler";
-
-static void VirtualKeyboardCallback(actiontype type, unsigned int code)
-{
-    if (type != COMPLETED) {
-        Message message;
-        message.code = code;
-        message.type = type;
-        write(g_pipefd[1], &message, sizeof(message));
-    }
-}
-
-namespace WPEFramework {
-
-namespace Nexus {
-
-    Display::SurfaceImplementation::SurfaceImplementation(Display& display, const std::string& name, const uint32_t width, const uint32_t height)
-        : _parent(display)
-        , _refcount(1)
-        , _name(name)
-        , _width(width)
-        , _height(height)
-        , _nativeWindow(nullptr)
-        , _keyboard(nullptr)
-    {
-
-        uint32_t nexusClientId(0); // For now we only accept 0. See Mail David Montgomery
-        const char* tmp(getenv("CLIENT_IDENTIFIER"));
-
-        if ((tmp != nullptr) && ((tmp = strchr(tmp, ',')) != nullptr)) {
-            nexusClientId = atoi(&(tmp[1]));
-        }
-
-        NXPL_NativeWindowInfoEXT windowInfo;
-        NXPL_GetDefaultNativeWindowInfoEXT(&windowInfo);
-        windowInfo.x = 0;
-        windowInfo.y = 0;
-        windowInfo.width = _width;
-        windowInfo.height = _height;
-        windowInfo.stretch = true;
-#ifdef BACKEND_BCM_NEXUS_NXCLIENT
-        windowInfo.zOrder = 0;
-#endif
-        windowInfo.clientID = nexusClientId;
-        _nativeWindow = NXPL_CreateNativeWindowEXT(&windowInfo);
-
-        _parent.Register(this);
-    }
-
-    /* virtual */ Display::SurfaceImplementation::~SurfaceImplementation()
-    {
-        NEXUS_SurfaceClient_Release(reinterpret_cast<NEXUS_SurfaceClient*>(_nativeWindow));
-
-        _parent.Unregister(this);
-    }
-
-    Display::Display(const std::string& name)
-        : _displayName(name)
-        , _nxplHandle(nullptr)
-        , _virtualkeyboard(nullptr)
-    {
-
-        NEXUS_DisplayHandle displayHandle(nullptr);
-
-#ifdef V3D_DRM_DISABLE
-        ::setenv("V3D_DRM_DISABLE", "1", 1);
-#endif
-
-#ifdef BACKEND_BCM_NEXUS_NXCLIENT
-        NxClient_JoinSettings joinSettings;
-        NxClient_GetDefaultJoinSettings(&joinSettings);
-
-        strcpy(joinSettings.name, name.c_str());
-
-        NEXUS_Error rc = NxClient_Join(&joinSettings);
-        BDBG_ASSERT(!rc);
-#else
-        NEXUS_Error rc = NEXUS_Platform_Join();
-        BDBG_ASSERT(!rc);
-#endif
-
-        NXPL_RegisterNexusDisplayPlatform(&_nxplHandle, displayHandle);
-
-        if (pipe(g_pipefd) == -1) {
-            g_pipefd[0] = -1;
-            g_pipefd[1] = -1;
-        }
-
-        _virtualkeyboard = Construct(name.c_str(), connectorName, VirtualKeyboardCallback);
-        if (_virtualkeyboard == nullptr) {
-            fprintf(stderr, "[LibinputServer] Initialization of virtual keyboard failed!!!\n");
-        }
-
-        printf("Constructed the Display: %p - %s", this, _displayName.c_str());
-    }
-
-    Display::~Display()
-    {
-        NXPL_UnregisterNexusDisplayPlatform(_nxplHandle);
-#ifdef BACKEND_BCM_NEXUS_NXCLIENT
-        NxClient_Uninit();
-#endif
-        if (_virtualkeyboard != nullptr) {
-            Destruct(_virtualkeyboard);
-        }
-
-        printf("Destructed the Display: %p - %s", this, _displayName.c_str());
-    }
-
-    /* virtual */ Compositor::IDisplay::ISurface* Display::Create(const std::string& name, const uint32_t width, const uint32_t height)
-    {
-        return (new SurfaceImplementation(*this, name, width, height));
-    }
-
-    /* static */ Compositor::IDisplay* Display::Instance(const std::string& displayName)
-    {
-        static Display myDisplay(displayName);
-
-        return (&myDisplay);
-    }
-
-    /* virtual */ int Display::Process(const uint32_t data)
-    {
-        Message message;
-        if ((data != 0) && (g_pipefd[0] != -1) && (read(g_pipefd[0], &message, sizeof(message)) > 0)) {
-
-            std::list<SurfaceImplementation*>::iterator index(_surfaces.begin());
-
-            while (index != _surfaces.end()) {
-                // RELEASED  = 0,
-                // PRESSED   = 1,
-                // REPEAT    = 2,
-
-                (*index)->SendKey(message.code, (message.type == 0 ? IDisplay::IKeyboard::released : IDisplay::IKeyboard::pressed), time(nullptr));
-                index++;
-            }
-        }
-
-        return (0);
-    }
-
-    /* virtual */ int Display::FileDescriptor() const
-    {
-        return (g_pipefd[0]);
-    }
-}
-
-/* static */ Compositor::IDisplay* Compositor::IDisplay::Instance(const std::string& displayName)
-{
-    return (Nexus::Display::Instance(displayName));
-}
-}
diff --git a/Compositor/lib/Nexus/Client/Implementation.h b/Compositor/lib/Nexus/Client/Implementation.h
deleted file mode 100644
index 85e1f16..0000000
--- a/Compositor/lib/Nexus/Client/Implementation.h
+++ /dev/null
@@ -1,160 +0,0 @@
-#ifndef NEXUS_CPP_ABSTRACTION_H
-#define NEXUS_CPP_ABSTRACTION_H
-
-#define EGL_EGLEXT_PROTOTYPES 1
-
-#include <algorithm>
-#include <cassert>
-#include <list>
-#include <string>
-
-#include <EGL/egl.h>
-#include <EGL/eglext.h>
-
-#if __cplusplus <= 199711L
-#define nullptr NULL
-#endif
-
-#include <compositor/Client.h>
-
-#include <refsw/nexus_config.h>
-#include <refsw/nexus_core_utils.h>
-#include <refsw/nexus_display.h>
-#include <refsw/nexus_platform.h>
-#include <refsw/default_nexus.h>
-
-#ifdef BACKEND_BCM_NEXUS_NXCLIENT
-#include <refsw/nxclient.h>
-#endif
-
-namespace WPEFramework {
-namespace Nexus {
-
-    class Display : public Compositor::IDisplay {
-    private:
-        Display() = delete;
-        Display(const Display&) = delete;
-        Display& operator=(const Display&) = delete;
-
-        class SurfaceImplementation : public Compositor::IDisplay::ISurface {
-        private:
-            SurfaceImplementation() = delete;
-            SurfaceImplementation(const SurfaceImplementation&) = delete;
-            SurfaceImplementation& operator=(const SurfaceImplementation&) = delete;
-
-        public:
-            SurfaceImplementation(Display& compositor, const std::string& name, const uint32_t width, const uint32_t height);
-            virtual ~SurfaceImplementation();
-
-        public:
-            virtual void AddRef() const override
-            {
-                _refcount++;
-            }
-            virtual uint32_t Release() const override
-            {
-                if (--_refcount == 0) {
-                    delete const_cast<SurfaceImplementation*>(this);
-                }
-                return (0);
-            }
-            virtual EGLNativeWindowType Native() const override
-            {
-                return (static_cast<EGLNativeWindowType>(_nativeWindow));
-            }
-            virtual std::string Name() const override
-            {
-                return _name;
-            }
-            virtual int32_t Height() const override
-            {
-                return (_height);
-            }
-            virtual int32_t Width() const override
-            {
-                return (_width);
-            }
-            virtual void Keyboard(Compositor::IDisplay::IKeyboard* keyboard) override
-            {
-                assert((_keyboard == nullptr) ^ (keyboard == nullptr));
-                _keyboard = keyboard;
-            }
-            inline void SendKey(const uint32_t key, const IKeyboard::state action, const uint32_t time)
-            {
-
-                if (_keyboard != nullptr) {
-                    _keyboard->Direct(key, action);
-                }
-            }
-
-        private:
-            Display& _parent;
-            mutable uint32_t _refcount;
-            std::string _name;
-            int32_t _width;
-            int32_t _height;
-            EGLSurface _nativeWindow;
-            IKeyboard* _keyboard;
-        };
-
-    private:
-        Display(const std::string& displayName);
-
-    public:
-        static Compositor::IDisplay* Instance(const std::string& displayName);
-
-        virtual ~Display();
-
-    public:
-        // Lifetime management
-        virtual void AddRef() const
-        {
-        }
-        virtual uint32_t Release() const
-        {
-            // Display can not be destructed, so who cares :-)
-            return (0);
-        }
-
-        // Methods
-        virtual EGLNativeDisplayType Native() const override
-        {
-            return (static_cast<EGLNativeDisplayType>(EGL_DEFAULT_DISPLAY));
-        }
-        virtual const std::string& Name() const override
-        {
-            return (_displayName);
-        }
-        virtual int Process(const uint32_t data) override;
-        virtual int FileDescriptor() const override;
-        virtual ISurface* Create(const std::string& name, const uint32_t width, const uint32_t height) override;
-
-    private:
-        inline void Register(SurfaceImplementation* surface)
-        {
-            std::list<SurfaceImplementation*>::iterator index(std::find(_surfaces.begin(), _surfaces.end(), surface));
-
-            if (index == _surfaces.end()) {
-                _surfaces.push_back(surface);
-            }
-        }
-        inline void Unregister(SurfaceImplementation* surface)
-        {
-            std::list<SurfaceImplementation*>::iterator index(std::find(_surfaces.begin(), _surfaces.end(), surface));
-
-            if (index != _surfaces.end()) {
-                _surfaces.erase(index);
-            }
-        }
-
-    private:
-        const std::string _displayName;
-        NXPL_PlatformHandle _nxplHandle;
-        void* _virtualkeyboard;
-        std::list<SurfaceImplementation*> _surfaces;
-    };
-
-} // Nexus
-} // WPEFramework
-
-#endif // NEXUS_CPP_ABSTRACTION_H
diff --git a/Compositor/lib/Nexus/Client/Module.h b/Compositor/lib/Nexus/Client/Module.h
deleted file mode 100644
index caa9c89..0000000
--- a/Compositor/lib/Nexus/Client/Module.h
+++ /dev/null
@@ -1,14 +0,0 @@
-#ifndef __MODULE_COMPOSITION_CLIENT_H
-#define __MODULE_COMPOSITION_CLIENT_H
-
-#ifndef MODULE_NAME
-#define MODULE_NAME Composition_Client
-#endif
-
-#include <core/core.h>
-#include <tracing/tracing.h>
-
-#undef EXTERNAL
-#define EXTERNAL
-
-#endif // __MODULE_COMPOSITION_CLIENT_H
diff --git a/Compositor/lib/RPI/CMakeLists.txt b/Compositor/lib/RPI/CMakeLists.txt
index 6349686..6a558d3 100644
--- a/Compositor/lib/RPI/CMakeLists.txt
+++ b/Compositor/lib/RPI/CMakeLists.txt
@@ -1,2 +1 @@
 add_subdirectory (Compositor)
-add_subdirectory (Client)
diff --git a/Compositor/lib/RPI/Client/CMakeLists.txt b/Compositor/lib/RPI/Client/CMakeLists.txt
deleted file mode 100644
index c10c74e..0000000
--- a/Compositor/lib/RPI/Client/CMakeLists.txt
+++ /dev/null
@@ -1,49 +0,0 @@
-set(TARGET compositorclient)
-
-message("Setup ${TARGET} v${VERSION}...")
-
-find_package(EGL REQUIRED)
-find_package(${NAMESPACE}Core REQUIRED)
-find_package(${NAMESPACE}Plugins REQUIRED)
-find_package(${NAMESPACE}VirtualInput REQUIRED)
-
-add_library(${TARGET} SHARED Implementation.cpp)
-
-target_link_libraries(${TARGET}
-    PRIVATE
-        ${NAMESPACE}Core::${NAMESPACE}Core
-        ${NAMESPACE}VirtualInput::${NAMESPACE}VirtualInput
-        ${NAMESPACE}Plugins::${NAMESPACE}Plugins
-        ${EGL_LIBRARIES}
-)
-
-set_target_properties(${TARGET} PROPERTIES
-        CXX_STANDARD 11
-        CXX_STANDARD_REQUIRED YES
-        VERSION ${VERSION}
-        SOVERSION ${VERSION_MAJOR}
-)
-
-target_include_directories(${TARGET}
-    PUBLIC
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../Client>
-        $<INSTALL_INTERFACE:include/${NAMESPACE}>
-    PRIVATE
-        ${EGL_INCLUDE_DIRS})
-
-target_compile_definitions(${TARGET}
-    PRIVATE
-        ${EGL_DEFINITIONS})
-
-install(
-        TARGETS ${TARGET}  EXPORT ${TARGET}Targets  # for downstream dependencies
-        ARCHIVE DESTINATION lib COMPONENT libs      # static lib
-        LIBRARY DESTINATION lib COMPONENT libs      # shared lib
-        FRAMEWORK DESTINATION bin COMPONENT libs    # for mac
-)
-
-InstallPackageConfig(
-        TARGETS ${TARGET}
-        DESCRIPTION "A compositor implementation wrapper for RPI and key handling.")
-
-InstallCMakeConfig(TARGETS ${TARGET})
diff --git a/Compositor/lib/RPI/Client/Implementation.cpp b/Compositor/lib/RPI/Client/Implementation.cpp
deleted file mode 100644
index 92f8c94..0000000
--- a/Compositor/lib/RPI/Client/Implementation.cpp
+++ /dev/null
@@ -1,498 +0,0 @@
-#include "Module.h"
-
-MODULE_NAME_DECLARATION(BUILD_REFERENCE)
-
-#include <virtualinput/virtualinput.h>
-
-#include <EGL/egl.h>
-#include <EGL/eglext.h>
-#include <bcm_host.h>
-
-#include <compositor/Client.h>
-#include <interfaces/IComposition.h>
-
-int g_pipefd[2];
-struct Message {
-    uint32_t code;
-    actiontype type;
-};
-
-static const char* connectorName = "/tmp/keyhandler";
-static void VirtualKeyboardCallback(actiontype type, unsigned int code)
-{
-    if (type != COMPLETED) {
-        Message message;
-        message.code = code;
-        message.type = type;
-        write(g_pipefd[1], &message, sizeof(message));
-    }
-}
-
-namespace {
-
-class BCMHostInit {
-public:
-    BCMHostInit(const BCMHostInit&) = delete;
-    BCMHostInit& operator=(const BCMHostInit&) = delete;
-
-    BCMHostInit()
-    {
-        bcm_host_init();
-    }
-
-    ~BCMHostInit()
-    {
-        bcm_host_deinit();
-    }
-};
-}
-
-namespace WPEFramework {
-
-static Core::NodeId Connector()
-{
-
-    string connector;
-    if ((Core::SystemInfo::GetEnvironment(_T("COMPOSITOR"), connector) == false) || (connector.empty() == true)) {
-        connector = _T("/tmp/compositor");
-    }
-    return (Core::NodeId(connector.c_str()));
-}
-
-class Display : public Compositor::IDisplay {
-private:
-    Display() = delete;
-    Display(const Display&) = delete;
-    Display& operator=(const Display&) = delete;
-
-    class EXTERNAL CompositorClient {
-    private:
-        // -------------------------------------------------------------------
-        // This object should not be copied or assigned. Prevent the copy
-        // constructor and assignment constructor from being used. Compiler
-        // generated assignment and copy methods will be blocked by the
-        // following statments.
-        // Define them but do not implement them, compile error/link error.
-        // -------------------------------------------------------------------
-        CompositorClient(const CompositorClient& a_Copy) = delete;
-        CompositorClient& operator=(const CompositorClient& a_RHS) = delete;
-
-    public:
-        CompositorClient(const TCHAR formatter[], ...)
-        {
-            va_list ap;
-            va_start(ap, formatter);
-            Trace::Format(_text, formatter, ap);
-            va_end(ap);
-        }
-        CompositorClient(const string& text)
-            : _text(Core::ToString(text))
-        {
-        }
-        ~CompositorClient() = default;
-
-    public:
-        inline const char* Data() const
-        {
-            return (_text.c_str());
-        }
-        inline uint16_t Length() const
-        {
-            return (static_cast<uint16_t>(_text.length()));
-        }
-
-    private:
-        string _text;
-    };
-
-    class SurfaceImplementation : public Exchange::IComposition::IClient, public Compositor::IDisplay::ISurface {
-    public:
-        SurfaceImplementation() = delete;
-        SurfaceImplementation(const SurfaceImplementation&) = delete;
-        SurfaceImplementation& operator=(const SurfaceImplementation&) = delete;
-
-        SurfaceImplementation(
-            Display* compositor, const std::string& name,
-            const uint32_t width, const uint32_t height);
-        virtual ~SurfaceImplementation();
-
-        using Exchange::IComposition::IClient::AddRef;
-
-        void Opacity(const uint32_t value) override;
-        void ChangedGeometry(const Exchange::IComposition::Rectangle& rectangle) override;
-        void ChangedZOrder(const uint8_t zorder) override;
-
-        virtual string Name() const override
-        {
-            return _name;
-        }
-        virtual void Kill() override
-        {
-            //todo: implement
-            TRACE(CompositorClient, (_T("Kill called for Client %s. Not supported."), Name().c_str()));
-        }
-        inline EGLNativeWindowType Native() const
-        {
-            return (static_cast<EGLNativeWindowType>(_nativeSurface));
-        }
-        inline int32_t Width() const
-        {
-            return _width;
-        }
-        inline int32_t Height() const
-        {
-            return _height;
-        }
-        inline void Keyboard(
-            Compositor::IDisplay::IKeyboard* keyboard)
-        {
-            assert((_keyboard == nullptr) ^ (keyboard == nullptr));
-            _keyboard = keyboard;
-        }
-        inline void SendKey(
-            const uint32_t key,
-            const IKeyboard::state action, const uint32_t time)
-        {
-            if (_keyboard != nullptr) {
-                _keyboard->Direct(key, action);
-            }
-        }
-
-    private:
-        BEGIN_INTERFACE_MAP(Entry)
-        INTERFACE_ENTRY(Exchange::IComposition::IClient)
-        END_INTERFACE_MAP
-
-    private:
-        Display& _display;
-        const std::string _name;
-        const uint32_t _width;
-        const uint32_t _height;
-        uint32_t _opacity;
-        uint32_t _layer;
-
-        EGLSurface _nativeSurface;
-        EGL_DISPMANX_WINDOW_T _nativeWindow;
-        DISPMANX_DISPLAY_HANDLE_T _dispmanDisplay;
-        DISPMANX_UPDATE_HANDLE_T _dispmanUpdate;
-        DISPMANX_ELEMENT_HANDLE_T _dispmanElement;
-
-        VC_RECT_T _dstRect;
-        VC_RECT_T _srcRect;
-
-        IKeyboard* _keyboard;
-    };
-
-public:
-    Display(const std::string& displayName);
-    virtual ~Display();
-
-    virtual void AddRef() const
-    {
-    }
-    virtual uint32_t Release() const
-    {
-        return (0);
-    }
-    virtual EGLNativeDisplayType Native() const override
-    {
-        return (static_cast<EGLNativeDisplayType>(EGL_DEFAULT_DISPLAY));
-    }
-    virtual const std::string& Name() const final
-    {
-        return (_displayName);
-    }
-    virtual int Process(const uint32_t data) override;
-    virtual int FileDescriptor() const override;
-    virtual ISurface* Create(
-        const std::string& name,
-        const uint32_t width, const uint32_t height) override;
-
-    inline uint32_t DisplaySizeWidth() const
-    {
-        return _displaysize.first;
-    }
-
-    inline uint32_t DisplaySizeHeight() const
-    {
-        return _displaysize.second;
-    }
-
-private:
-    inline void Register(SurfaceImplementation* surface);
-    inline void Unregister(SurfaceImplementation* surface);
-    inline void OfferClientInterface(Exchange::IComposition::IClient* client);
-    inline void RevokeClientInterface(Exchange::IComposition::IClient* client);
-
-    using DisplaySize = std::pair<uint32_t, uint32_t>;
-
-    inline static DisplaySize RetrieveDisplaySize()
-    {
-        DisplaySize displaysize;
-        graphics_get_display_size(0, &displaysize.first, &displaysize.second);
-        return displaysize;
-    }
-
-    const std::string _displayName;
-    mutable Core::CriticalSection _adminLock;
-    void* _virtualkeyboard;
-    const DisplaySize _displaysize;
-    std::list<SurfaceImplementation*> _surfaces;
-    Core::ProxyType<RPC::CommunicatorClient> _compositerServerRPCConnection;
-};
-
-Display::SurfaceImplementation::SurfaceImplementation(
-    Display* display,
-    const std::string& name,
-    const uint32_t width, const uint32_t height)
-    : Exchange::IComposition::IClient()
-    , _display(*display)
-    , _name(name)
-    , _width(width)
-    , _height(height)
-    , _opacity(255)
-    , _layer(0)
-    , _keyboard(nullptr)
-{
-
-    TRACE(CompositorClient, (_T("Created client named: %s"), _name.c_str()));
-
-    VC_DISPMANX_ALPHA_T alpha = {
-        static_cast<DISPMANX_FLAGS_ALPHA_T>(DISPMANX_FLAGS_ALPHA_FROM_SOURCE | DISPMANX_FLAGS_ALPHA_MIX),
-        255,
-        0
-    };
-    vc_dispmanx_rect_set(&_dstRect, 0, 0, _display.DisplaySizeWidth(), _display.DisplaySizeHeight());
-    vc_dispmanx_rect_set(&_srcRect,
-        0, 0, (_display.DisplaySizeWidth() << 16), (_display.DisplaySizeHeight() << 16));
-
-    _dispmanDisplay = vc_dispmanx_display_open(0);
-    _dispmanUpdate = vc_dispmanx_update_start(0);
-    _dispmanElement = vc_dispmanx_element_add(
-        _dispmanUpdate,
-        _dispmanDisplay,
-        _layer,
-        &_dstRect,
-        0 /*src*/,
-        &_srcRect,
-        DISPMANX_PROTECTION_NONE,
-        &alpha /*alpha*/,
-        0 /*clamp*/,
-        DISPMANX_NO_ROTATE);
-    vc_dispmanx_update_submit_sync(_dispmanUpdate);
-
-    _nativeWindow.element = _dispmanElement;
-    _nativeWindow.width = _display.DisplaySizeWidth();
-    _nativeWindow.height = _display.DisplaySizeHeight();
-    _nativeSurface = static_cast<EGLSurface>(&_nativeWindow);
-
-    _display.Register(this);
-}
-
-Display::SurfaceImplementation::~SurfaceImplementation()
-{
-
-    TRACE(CompositorClient, (_T("Destructing client named: %s"), _name.c_str()));
-
-    _dispmanUpdate = vc_dispmanx_update_start(0);
-    vc_dispmanx_element_remove(_dispmanUpdate, _dispmanElement);
-    vc_dispmanx_update_submit_sync(_dispmanUpdate);
-    vc_dispmanx_display_close(_dispmanDisplay);
-
-    _display.Unregister(this);
-}
-
-void Display::SurfaceImplementation::Opacity(
-    const uint32_t value)
-{
-
-    _opacity = (value > Exchange::IComposition::maxOpacity) ? Exchange::IComposition::maxOpacity : value;
-
-    _dispmanUpdate = vc_dispmanx_update_start(0);
-    vc_dispmanx_element_change_attributes(_dispmanUpdate,
-        _dispmanElement,
-        (1 << 1),
-        _layer,
-        _opacity,
-        &_dstRect,
-        &_srcRect,
-        0,
-        DISPMANX_NO_ROTATE);
-    vc_dispmanx_update_submit_sync(_dispmanUpdate);
-}
-
-void Display::SurfaceImplementation::ChangedGeometry(const Exchange::IComposition::Rectangle& rectangle)
-{
-    vc_dispmanx_rect_set(&_dstRect, rectangle.x, rectangle.y, rectangle.width, rectangle.height);
-    vc_dispmanx_rect_set(&_srcRect,
-        0, 0, (_display.DisplaySizeWidth() << 16), (_display.DisplaySizeHeight() << 16));
-
-    _dispmanUpdate = vc_dispmanx_update_start(0);
-    vc_dispmanx_element_change_attributes(_dispmanUpdate,
-        _dispmanElement,
-        (1 << 2),
-        _layer,
-        _opacity,
-        &_dstRect,
-        &_srcRect,
-        0,
-        DISPMANX_NO_ROTATE);
-    vc_dispmanx_update_submit_sync(_dispmanUpdate);
-}
-void Display::SurfaceImplementation::ChangedZOrder(const uint8_t zorder)
-{
-    _dispmanUpdate = vc_dispmanx_update_start(0);
-    int8_t layer = 0;
-
-    if (zorder == static_cast<uint8_t>(~0)) {
-        layer = -1;
-    } else {
-        layer = zorder;
-        _layer = layer;
-    }
-    vc_dispmanx_element_change_layer(_dispmanUpdate, _dispmanElement, layer);
-    vc_dispmanx_update_submit_sync(_dispmanUpdate);
-}
-
-Display::Display(const string& name)
-    : _displayName(name)
-    , _adminLock()
-    , _virtualkeyboard(nullptr)
-    , _displaysize(RetrieveDisplaySize())
-    , _compositerServerRPCConnection(Core::ProxyType<RPC::CommunicatorClient>::Create(Connector(), Core::ProxyType<RPC::InvokeServerType<2, 1>>::Create()))
-{
-
-    uint32_t result = _compositerServerRPCConnection->Open(RPC::CommunicationTimeOut);
-    if (result != Core::ERROR_NONE) {
-        TRACE(CompositorClient, (_T("Could not open connection to Compositor with node %s. Error: %s"), _compositerServerRPCConnection->Source().RemoteId(), Core::NumberType<uint32_t>(result).Text()));
-        _compositerServerRPCConnection.Release();
-    }
-
-    if (pipe(g_pipefd) == -1) {
-        g_pipefd[0] = -1;
-        g_pipefd[1] = -1;
-    }
-    _virtualkeyboard = Construct(
-        name.c_str(), connectorName, VirtualKeyboardCallback);
-    if (_virtualkeyboard == nullptr) {
-        TRACE(CompositorClient, (_T("Initialization of virtual keyboard failed for Display %s!"), Name()));
-    }
-}
-
-Display::~Display()
-{
-
-    for_each(_surfaces.begin(), _surfaces.end(), [&](SurfaceImplementation* surface) {
-        string name = surface->Name();
-
-        if (static_cast<Core::IUnknown*>(surface)->Release() != Core::ERROR_DESTRUCTION_SUCCEEDED) { //note, need cast to prevent ambigious call
-            TRACE(CompositorClient, (_T("Compositor Surface [%s] is not properly destructed"), name.c_str()));
-        }
-    });
-
-    if (_virtualkeyboard != nullptr) {
-        Destruct(_virtualkeyboard);
-    }
-
-    if (_compositerServerRPCConnection.IsValid() == true) {
-        _compositerServerRPCConnection.Release();
-    }
-}
-
-int Display::Process(const uint32_t data)
-{
-    Message message;
-    if ((data != 0) && (g_pipefd[0] != -1) && (read(g_pipefd[0], &message, sizeof(message)) > 0)) {
-
-        _adminLock.Lock();
-        std::list<SurfaceImplementation*>::iterator index(_surfaces.begin());
-        while (index != _surfaces.end()) {
-            // RELEASED  = 0,
-            // PRESSED   = 1,
-            // REPEAT    = 2,
-
-            (*index)->SendKey(message.code, (message.type == 0 ? IDisplay::IKeyboard::released : IDisplay::IKeyboard::pressed), time(nullptr));
-            index++;
-        }
-        _adminLock.Unlock();
-    }
-    return (0);
-}
-
-int Display::FileDescriptor() const
-{
-    return (g_pipefd[0]);
-}
-
-Compositor::IDisplay::ISurface* Display::Create(
-    const std::string& name, const uint32_t width, const uint32_t height)
-{
-
-    SurfaceImplementation* retval = (Core::Service<SurfaceImplementation>::Create<SurfaceImplementation>(this, name, width, height));
-
-    OfferClientInterface(retval);
-
-    return retval;
-}
-
-inline void Display::Register(Display::SurfaceImplementation* surface)
-{
-    ASSERT(surface != nullptr);
-
-    _adminLock.Lock();
-
-    std::list<SurfaceImplementation*>::iterator index(
-        std::find(_surfaces.begin(), _surfaces.end(), surface));
-    if (index == _surfaces.end()) {
-        _surfaces.push_back(surface);
-    }
-
-    _adminLock.Unlock();
-}
-
-inline void Display::Unregister(Display::SurfaceImplementation* surface)
-{
-
-    ASSERT(surface != nullptr);
-
-    _adminLock.Lock();
-
-    std::list<SurfaceImplementation*>::iterator index(
-        std::find(_surfaces.begin(), _surfaces.end(), surface));
-    if (index != _surfaces.end()) {
-        _surfaces.erase(index);
-    }
-
-    _adminLock.Unlock();
-
-    RevokeClientInterface(surface);
-}
-
-void Display::OfferClientInterface(Exchange::IComposition::IClient* client)
-{
-    ASSERT(client != nullptr);
-    uint32_t result = _compositerServerRPCConnection->Offer(client);
-    if (result != Core::ERROR_NONE) {
-        TRACE(CompositorClient, (_T("Could not offer IClient interface with callsign %s to Compositor. Error: %s"), client->Name(), Core::NumberType<uint32_t>(result).Text()));
-    }
-}
-
-void Display::RevokeClientInterface(Exchange::IComposition::IClient* client)
-{
-    ASSERT(client != nullptr);
-
-    uint32_t result = _compositerServerRPCConnection->Revoke(client);
-
-    if (result != Core::ERROR_NONE) {
-        TRACE(CompositorClient, (_T("Could not revoke IClient interface with callsign %s to Compositor. Error: %s"), client->Name(), Core::NumberType<uint32_t>(result).Text()));
-    }
-}
-
-Compositor::IDisplay* Compositor::IDisplay::Instance(const string& displayName)
-{
-    static BCMHostInit bcmhostinit; // must be done before Display constructor
-    static Display& myDisplay = Core::SingletonType<Display>::Instance(displayName);
-
-    return (&myDisplay);
-}
-}
diff --git a/Compositor/lib/RPI/Client/Module.h b/Compositor/lib/RPI/Client/Module.h
deleted file mode 100644
index 1e56f76..0000000
--- a/Compositor/lib/RPI/Client/Module.h
+++ /dev/null
@@ -1,22 +0,0 @@
-#ifndef __MODULE_COMPOSITION_CLIENT_H
-#define __MODULE_COMPOSITION_CLIENT_H
-
-#ifndef MODULE_NAME
-#define MODULE_NAME Composition_Client
-#endif
-
-#include <core/core.h>
-#include <tracing/tracing.h>
-
-#ifdef __WIN32__
-#undef EXTERNAL
-#ifdef __MODULE_COM__
-#define EXTERNAL EXTERNAL_EXPORT
-#else
-#define EXTERNAL EXTERNAL_IMPORT
-#endif
-#else
-#define EXTERNAL
-#endif
-
-#endif // __MODULE_COMPOSITION_CLIENT_H
diff --git a/Compositor/lib/Wayland/CMakeLists.txt b/Compositor/lib/Wayland/CMakeLists.txt
index 9f3047a..09a046b 100644
--- a/Compositor/lib/Wayland/CMakeLists.txt
+++ b/Compositor/lib/Wayland/CMakeLists.txt
@@ -4,4 +4,3 @@ add_subdirectory (NexusServer)
 endif ()
 
 add_subdirectory (Compositor)
-add_subdirectory (Client)
diff --git a/Compositor/lib/Wayland/Client/CMakeLists.txt b/Compositor/lib/Wayland/Client/CMakeLists.txt
deleted file mode 100644
index b1acbe7..0000000
--- a/Compositor/lib/Wayland/Client/CMakeLists.txt
+++ /dev/null
@@ -1,87 +0,0 @@
-set(TARGET compositorclient)
-
-message("Setup ${TARGET} v${VERSION}...")
-
-find_package(WaylandClient REQUIRED)
-find_package(EGL REQUIRED)
-find_package(WaylandEGL REQUIRED)
-find_package(WesterosClient REQUIRED)
-find_package(${NAMESPACE}Core REQUIRED)
-find_package(NXCLIENT)
-
-add_library(${TARGET} SHARED Westeros.cpp)
-
-target_link_libraries(${TARGET}
-    PRIVATE
-        WaylandEGL::WaylandEGL
-        ${EGL_LIBRARIES}
-        ${NAMESPACE}Core::${NAMESPACE}Core
-        WesterosClient::WesterosClient
-        WaylandClient::WaylandClient)
-
-set_target_properties(${TARGET} PROPERTIES
-        CXX_STANDARD 11
-        CXX_STANDARD_REQUIRED YES
-        VERSION ${VERSION}
-        SOVERSION ${VERSION_MAJOR}
-)
-
-if (NXCLIENT_FOUND)
-    target_link_libraries(${TARGET}
-        PRIVATE
-            NXCLIENT::NXCLIENT)
-endif ()
-
-find_package(BCM_HOST QUIET)
-if(BCM_HOST_FOUND)
-    target_link_libraries(${TARGET}
-        PRIVATE
-            BCM_HOST::BCM_HOST)
-    target_compile_definitions(${TARGET}
-        PRIVATE
-            BCM_HOST=ON)
-endif(BCM_HOST_FOUND)
-
-if(EGL_FOUND)
-    add_definitions(${EGL_CFLAGS})
-endif(EGL_FOUND)
-
-if (PLUGIN_COMPOSITOR_NXSERVER)
-    if (V3D_DRM_DISABLE)
-        target_compile_definitions(${TARGET}
-            PRIVATE
-                V3D_DRM_DISABLE=1)
-    endif ()
-endif ()
-
-target_include_directories(${TARGET}
-    PUBLIC
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../Client>
-        $<INSTALL_INTERFACE:include/${NAMESPACE}>
-    PRIVATE
-        ${EGL_INCLUDE_DIRS}
-)
-
-target_compile_definitions(${TARGET}
-    PRIVATE
-        ${EGL_DEFINITIONS})
-
-set_target_properties(${TARGET} PROPERTIES
-        CXX_STANDARD 11
-        CXX_STANDARD_REQUIRED YES
-        FRAMEWORK FALSE
-        DEFINE_SYMBOL WPEFRAMEWORK_WAYLAND_EGL_CLIENT
-)
-
-install(
-        TARGETS ${TARGET}  EXPORT ${TARGET}Targets  # for downstream dependencies
-        ARCHIVE DESTINATION lib COMPONENT libs      # static lib
-        LIBRARY DESTINATION lib COMPONENT libs      # shared lib
-        FRAMEWORK DESTINATION bin COMPONENT libs    # for mac
-)
-
-InstallPackageConfig(
-        TARGETS ${TARGET}
-        DESCRIPTION "A compositor implementation wrapper for EGL and key handling.")
-
-InstallCMakeConfig(TARGETS ${TARGET})
diff --git a/Compositor/lib/Wayland/Client/Implementation.h b/Compositor/lib/Wayland/Client/Implementation.h
deleted file mode 100644
index 5231d0d..0000000
--- a/Compositor/lib/Wayland/Client/Implementation.h
+++ /dev/null
@@ -1,834 +0,0 @@
-#ifndef WAYLAND_CPP_ABSTRACTION_H
-#define WAYLAND_CPP_ABSTRACTION_H
-
-#define EGL_EGLEXT_PROTOTYPES 1
-
-#include <cassert>
-#include <list>
-#include <map>
-#include <semaphore.h>
-#include <signal.h>
-#include <string>
-#include <sys/types.h>
-#include <unistd.h>
-
-#include <EGL/egl.h>
-#include <EGL/eglext.h>
-
-#ifdef BCM_HOST
-#include <bcm_host.h>
-#endif
-
-#if __cplusplus <= 199711L
-#define nullptr NULL
-#endif
-
-#include "Module.h"
-#include <compositor/Client.h>
-
-//
-// Forward declaration of the wayland specific types.
-// We do not want to make this header file (tsemaphore.hhe C++ abstraction)
-// dependent on any wayland header file. This would conflict
-// with the idea behind the abstraction from C -> C++
-//
-struct wl_display;
-struct wl_registry;
-struct wl_compositor;
-struct wl_display;
-struct wl_seat;
-struct wl_output;
-struct wl_keyboard;
-struct wl_pointer;
-struct wl_touch;
-struct wl_simple_shell;
-struct wl_shell;
-struct wl_surface;
-struct wl_egl_window;
-struct wl_keyboard_listener;
-struct wl_callback;
-struct wl_callback_listener;
-struct wl_shell_surface;
-
-namespace WPEFramework {
-namespace Wayland {
-
-    class Display : public Compositor::IDisplay {
-    public:
-        struct ICallback {
-            virtual ~ICallback() {}
-            virtual void Attached(const uint32_t id) = 0;
-            virtual void Detached(const uint32_t id) = 0;
-        };
-        struct IPointer {
-            virtual ~IPointer() {}
-        };
-
-    private:
-        Display();
-        Display(const Display&) = delete;
-        Display& operator=(const Display&) = delete;
-
-        class CriticalSection {
-        private:
-            CriticalSection(const CriticalSection&);
-            CriticalSection& operator=(const CriticalSection&);
-
-        public:
-            CriticalSection()
-            {
-
-                pthread_mutexattr_t structAttributes;
-
-                // Create a recursive mutex for this process (no named version, use semaphore)
-                if ((pthread_mutexattr_init(&structAttributes) != 0) || (pthread_mutexattr_settype(&structAttributes, PTHREAD_MUTEX_RECURSIVE) != 0) || (pthread_mutex_init(&_lock, &structAttributes) != 0)) {
-                    // That will be the day, if this fails...
-                    assert(false);
-                }
-            }
-            ~CriticalSection()
-            {
-            }
-
-        public:
-            void Lock()
-            {
-                pthread_mutex_lock(&_lock);
-            }
-            void Unlock()
-            {
-                pthread_mutex_unlock(&_lock);
-            }
-
-        private:
-            pthread_mutex_t _lock;
-        };
-
-        class SurfaceImplementation : public Compositor::IDisplay::ISurface {
-        private:
-            SurfaceImplementation() = delete;
-            SurfaceImplementation(const SurfaceImplementation&) = delete;
-            SurfaceImplementation& operator=(const SurfaceImplementation&) = delete;
-
-        public:
-            SurfaceImplementation(Display& compositor, const std::string& name, const uint32_t width, const uint32_t height);
-            SurfaceImplementation(Display& compositor, const uint32_t id, const char* name);
-            SurfaceImplementation(Display& compositor, const uint32_t id, struct wl_surface* surface);
-            virtual ~SurfaceImplementation()
-            {
-            }
-
-        public:
-            virtual void AddRef() const override
-            {
-                _refcount++;
-                return;
-            }
-            virtual uint32_t Release() const override
-            {
-                if (--_refcount == 0) {
-                    delete const_cast<SurfaceImplementation*>(this);
-                }
-                return (0);
-            }
-            virtual EGLNativeWindowType Native() const override
-            {
-                return (static_cast<EGLNativeWindowType>(_native));
-            }
-            virtual std::string Name() const override
-            {
-                return _name;
-            }
-            virtual int32_t Height() const override
-            {
-                return (_height);
-            }
-            virtual int32_t Width() const override
-            {
-                return (_width);
-            }
-            virtual void Keyboard(IKeyboard* keyboard) override
-            {
-                assert((_keyboard == nullptr) ^ (keyboard == nullptr));
-                _keyboard = keyboard;
-
-                if (_keyboard != nullptr && _display != nullptr) {
-                    const std::string& mapping = _display->KeyMapConfiguration();
-                    _keyboard->KeyMap(mapping.c_str(), mapping.length());
-                }
-            }
-            inline uint32_t Id() const
-            {
-                return (_id);
-            }
-            inline bool IsVisible() const
-            {
-                return (_visible != 0);
-            }
-            inline uint32_t Opacity() const
-            {
-                return (_opacity);
-            }
-            inline uint32_t ZOrder() const
-            {
-                return (_ZOrder);
-            }
-            inline void Position(const uint32_t X, const uint32_t Y, const uint32_t height, const uint32_t width)
-            {
-                _adminLock.Lock();
-                if (_display != nullptr) {
-
-                    // Resize the surface
-                    _height = height;
-                    _width = width;
-                }
-                _adminLock.Unlock();
-            }
-            inline void Name(const char* name)
-            {
-                if (name != nullptr) {
-                    _name = name;
-                }
-            }
-            void Pointer(IPointer* pointer)
-            {
-                assert((_pointer == nullptr) ^ (pointer == nullptr));
-                _pointer = pointer;
-            }
-            void KeyMapConfiguration(const char information[], const uint16_t size)
-            {
-                if (_keyboard != nullptr) {
-                    _keyboard->KeyMap(information, size);
-                }
-            }
-            bool Connect(const EGLSurface& surface);
-            void Unlink();
-            void Resize(const int x, const int y, const int width, const int height);
-            void Dimensions(
-                const uint32_t visible,
-                const int32_t x, const int32_t y, const int32_t width, const int32_t height,
-                const uint32_t opacity,
-                const uint32_t zorder);
-            void Callback(wl_callback_listener* listener, void* data);
-            void Visibility(const bool visible);
-            void Opacity(const uint32_t opacity);
-            void ZOrder(const uint32_t order);
-            void BringToFront();
-            void SetTop();
-
-        private:
-            inline const bool UpScale() const
-            {
-                return _upScale;
-            }
-            void Redraw();
-
-        public:
-            // Called by C interface methods. A bit to much overkill to actually make the private and all kind
-            // of friend definitions.
-            struct wl_surface* _surface;
-
-        private:
-            friend Display;
-
-            mutable uint32_t _refcount;
-            int _level;
-            std::string _name;
-            uint32_t _id;
-            int32_t _x;
-            int32_t _y;
-            int32_t _width;
-            int32_t _height;
-            uint32_t _visible;
-            uint32_t _opacity;
-            uint32_t _ZOrder;
-            Display* _display;
-            struct wl_egl_window* _native;
-            struct wl_callback* _frameCallback;
-            struct wl_shell_surface* _shellSurface;
-            EGLSurface _eglSurfaceWindow;
-            IKeyboard* _keyboard;
-            IPointer* _pointer;
-            const bool _upScale;
-        };
-
-        class ImageImplementation {
-        private:
-            ImageImplementation();
-            ImageImplementation(const ImageImplementation&);
-            ImageImplementation& operator=(const ImageImplementation&);
-
-        public:
-            ImageImplementation(Display& compositor, uint32_t texture, const uint32_t width, const uint32_t height);
-            virtual ~ImageImplementation();
-
-        public:
-            inline void AddRef()
-            {
-                _refcount++;
-            }
-            inline void Release()
-            {
-                if (--_refcount == 0) {
-                    delete this;
-                }
-            }
-
-            inline EGLImageKHR GetImage() const
-            {
-                return _eglImageKHR;
-            }
-
-        private:
-            friend Display;
-            uint32_t _refcount;
-            EGLImageKHR _eglImageKHR;
-            Display* _display;
-        };
-
-        typedef std::map<const uint32_t, SurfaceImplementation*> SurfaceMap;
-        typedef std::map<struct wl_surface*, SurfaceImplementation*> WaylandSurfaceMap;
-
-        Display(const std::string& displayName)
-            : _display(nullptr)
-            , _registry(nullptr)
-            , _seat(nullptr)
-            , _simpleShell(nullptr)
-            , _output(nullptr)
-            , _keyboard(nullptr)
-            , _pointer(nullptr)
-            , _touch(nullptr)
-            , _shell(nullptr)
-            , _trigger()
-            , _redraw()
-            , _tid()
-            , _displayName(displayName)
-            , _keyboardReceiver(nullptr)
-            , _pointerReceiver(nullptr)
-            , _keyMapConfiguration()
-            , _eglDisplay(EGL_NO_DISPLAY)
-            , _eglConfig(0)
-            , _eglContext(EGL_NO_CONTEXT)
-            , _collect(false)
-            , _surfaces()
-            , _physical()
-            , _clientHandler(nullptr)
-            , _signal()
-            , _thread()
-            , _refCount(0)
-        {
-#ifdef BCM_HOST
-            bcm_host_init();
-#endif
-#ifdef V3D_DRM_DISABLE
-            ::setenv("V3D_DRM_DISABLE", "1", 1);
-#endif
-        }
-
-    public:
-        struct Rectangle {
-            int32_t X;
-            int32_t Y;
-            int32_t Width;
-            int32_t Height;
-        };
-
-        struct IProcess {
-            virtual ~IProcess() {}
-
-            virtual bool Dispatch() = 0;
-        };
-
-        class Surface {
-        public:
-            inline Surface()
-                : _implementation(nullptr)
-            {
-            }
-            inline Surface(SurfaceImplementation& impl)
-                : _implementation(&impl)
-            {
-                _implementation->AddRef();
-            }
-            inline Surface(const Surface& copy)
-                : _implementation(copy._implementation)
-            {
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                }
-            }
-            inline ~Surface()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                }
-            }
-
-            inline Surface& operator=(const Surface& rhs)
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                }
-                _implementation = rhs._implementation;
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                }
-                return (*this);
-            }
-
-        public:
-            inline bool IsValid() const
-            {
-                return (_implementation != nullptr);
-            }
-            inline uint32_t Id() const
-            {
-                assert(IsValid() == true);
-                return (_implementation->Id());
-            }
-            inline const std::string Name() const
-            {
-                assert(IsValid() == true);
-                return (_implementation->Name());
-            }
-            inline uint32_t Height() const
-            {
-                assert(IsValid() == true);
-                return (_implementation->Height());
-            }
-            inline uint32_t Width() const
-            {
-                assert(IsValid() == true);
-                return (_implementation->Width());
-            }
-            inline void Visibility(const bool visible)
-            {
-                assert(IsValid() == true);
-                return (_implementation->Visibility(visible));
-            }
-            inline void Opacity(const uint32_t opacity)
-            {
-                assert(IsValid() == true);
-                return (_implementation->Opacity(opacity));
-            }
-            inline void ZOrder(const uint32_t order)
-            {
-                assert(IsValid() == true);
-                return (_implementation->ZOrder(order));
-            }
-            inline void SetTop()
-            {
-                assert(IsValid() == true);
-                return (_implementation->SetTop());
-            }
-
-            inline const bool UpScale()
-            {
-                assert(IsValid() == true);
-                return (_implementation->UpScale());
-            }
-
-            inline void Position(const uint32_t X, const uint32_t Y, const uint32_t height, const uint32_t width)
-            {
-                assert(IsValid() == true);
-                _implementation->Position(X, Y, height, width);
-            }
-            inline void Keyboard(IKeyboard* keyboard)
-            {
-                assert(IsValid() == true);
-                return (_implementation->Keyboard(keyboard));
-            }
-            inline void Pointer(IPointer* pointer)
-            {
-                assert(IsValid() == true);
-                return (_implementation->Pointer(pointer));
-            }
-            inline void AddRef()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                    _implementation = nullptr;
-                }
-            }
-            inline void Release()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                    _implementation = nullptr;
-                }
-            }
-            inline void Callback(wl_callback_listener* listener, void* data = nullptr)
-            {
-                assert(IsValid() == true);
-                _implementation->Callback(listener, data);
-            }
-            inline void Resize(const int x, const int y, const int width, const int height)
-            {
-                assert(IsValid() == true);
-                _implementation->Resize(x, y, width, height);
-            }
-            inline void BringToFront()
-            {
-                assert(IsValid() == true);
-                _implementation->BringToFront();
-            }
-            inline EGLNativeWindowType Native() const
-            {
-                assert(IsValid() == true);
-                return (_implementation->Native());
-            }
-            inline void Unlink()
-            {
-                assert(IsValid() == true);
-                return _implementation->Unlink();
-            }
-
-        private:
-            SurfaceImplementation* _implementation;
-        };
-
-        class Image {
-        public:
-            inline Image()
-                : _implementation(nullptr)
-            {
-            }
-            inline Image(ImageImplementation& impl)
-                : _implementation(&impl)
-            {
-                _implementation->AddRef();
-            }
-            inline Image(const Image& copy)
-                : _implementation(copy._implementation)
-            {
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                }
-            }
-            inline ~Image()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                }
-            }
-
-            inline Image& operator=(const Image& rhs)
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                }
-                _implementation = rhs._implementation;
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                }
-                return (*this);
-            }
-
-        public:
-            inline bool IsValid() const
-            {
-                return (_implementation != nullptr);
-            }
-            inline void AddRef()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->AddRef();
-                    _implementation = nullptr;
-                }
-            }
-            inline void Release()
-            {
-                if (_implementation != nullptr) {
-                    _implementation->Release();
-                    _implementation = nullptr;
-                }
-            }
-            inline EGLImageKHR GetImage() const
-            {
-                assert(_implementation != nullptr);
-                return _implementation->GetImage();
-            }
-
-        private:
-            ImageImplementation* _implementation;
-        };
-
-    public:
-        typedef std::map<const std::string, Display*> DisplayMap;
-        typedef bool (*KeyHandler)(const uint32_t state, const uint32_t code, const uint32_t modifiers);
-
-        static void RuntimeDirectory(const std::string& directory)
-        {
-            _runtimeDir = directory;
-        }
-
-        static Display& Instance(const std::string& displayName);
-
-        ~Display()
-        {
-            ASSERT(_refCount == 0);
-            DisplayMap::iterator index(_displays.find(_displayName));
-
-            if (index != _displays.end()) {
-                _displays.erase(index);
-            }
-#ifdef BCM_HOST
-            bcm_host_deinit();
-#endif
-        }
-
-    public:
-        // Lifetime management
-        virtual void AddRef() const
-        {
-            if (Core::InterlockedIncrement(_refCount) == 1) {
-                const_cast<Display*>(this)->Initialize();
-            }
-            return;
-        }
-        virtual uint32_t Release() const
-        {
-            if (Core::InterlockedDecrement(_refCount) == 0) {
-                const_cast<Display*>(this)->Deinitialize();
-
-                //Indicate Wayland connection is closed properly
-                return (Core::ERROR_CONNECTION_CLOSED);
-            }
-            return (Core::ERROR_NONE);
-        }
-
-        // Methods
-        virtual EGLNativeDisplayType Native() const override
-        {
-            return (static_cast<EGLNativeDisplayType>(_display));
-        }
-        virtual const std::string& Name() const override
-        {
-            return (_displayName);
-        }
-        virtual int FileDescriptor() const override;
-        virtual int Process(const uint32_t data) override;
-        virtual ISurface* Create(const std::string& name, const uint32_t width, const uint32_t height) override;
-
-        inline bool IsOperational() const
-        {
-            return (_display != nullptr);
-        }
-        inline bool HasEGLContext() const
-        {
-            return (_eglContext != EGL_NO_CONTEXT);
-        }
-        inline void Callback(ICallback* callback) const
-        {
-            _adminLock.Lock();
-            assert((callback != nullptr) ^ (_clientHandler != nullptr));
-            _clientHandler = callback;
-            _adminLock.Unlock();
-        }
-        inline const std::string& RuntimeDirectory() const
-        {
-            return (_runtimeDir);
-        }
-        inline const std::string& KeyMapConfiguration() const
-        {
-            return _keyMapConfiguration;
-        }
-        const Rectangle& Physical() const
-        {
-            return (_physical);
-        }
-        void Get(const uint32_t id, Surface& surface)
-        {
-            _adminLock.Lock();
-
-            SurfaceMap::iterator index(_surfaces.find(id));
-
-            if (index != _surfaces.end()) {
-                surface = Surface(*(index->second));
-            } else {
-                surface.Release();
-            }
-            _adminLock.Unlock();
-        }
-        void LoadSurfaces();
-        Image Create(const uint32_t texture, const uint32_t width, const uint32_t height);
-        void Process(IProcess* processLoop);
-        void Signal();
-        inline EGLDisplay GetDisplay() const
-        {
-            return _eglDisplay;
-        }
-
-        inline void Trigger()
-        {
-            sem_post(&_trigger);
-        }
-
-        inline void Redraw()
-        {
-            sem_post(&_redraw);
-        }
-
-    private:
-        void Initialize();
-        void Deinitialize();
-        void EGLInitialize();
-
-    public:
-        // Called by C interface methods. A bit to much overkill to actually make the private and all kind
-        // of friend definitions, so left them public, nut should *NOT* be used by users of this class !!!
-        inline bool Collect() const
-        {
-            return (_collect);
-        }
-
-        void InitializeEGL();
-        void Constructed(const uint32_t id, wl_surface* surface);
-        void Constructed(const uint32_t id, const char* name);
-        void Destructed(const uint32_t id);
-        void Dimensions(
-            const uint32_t id, const uint32_t visible, const int32_t x, const int32_t y, const int32_t width,
-            const int32_t height, const uint32_t opacity, const uint32_t zorder);
-        void FocusKeyboard(struct wl_surface* surface, const bool state)
-        {
-            _adminLock.Lock();
-            WaylandSurfaceMap::const_iterator index = _waylandSurfaces.find(surface);
-
-            if (index != _waylandSurfaces.end()) {
-                if (state == false) {
-                    if (_keyboardReceiver == index->second) {
-                        _keyboardReceiver = nullptr;
-                        printf("%s:%d disable keyboard input\n", __FILE__, __LINE__);
-                    }
-                } else {
-                    _keyboardReceiver = index->second;
-                    printf("%s:%d PID=%d enabled keyboard input _keyboardReceiver=%p\n", __FILE__, __LINE__, getpid(), _keyboardReceiver);
-                }
-            }
-            _adminLock.Unlock();
-        }
-        void FocusPointer(struct wl_surface* surface, const bool state)
-        {
-            _adminLock.Lock();
-            WaylandSurfaceMap::const_iterator index = _waylandSurfaces.find(surface);
-
-            if (index != _waylandSurfaces.end()) {
-                if (state == false) {
-                    if (_pointerReceiver == index->second) {
-                        _pointerReceiver = nullptr;
-                    }
-                } else {
-                    _pointerReceiver = index->second;
-                }
-            }
-
-            _adminLock.Unlock();
-        }
-
-        void KeyMapConfiguration(const char information[], const uint16_t size)
-        {
-            _adminLock.Lock();
-
-            WaylandSurfaceMap::iterator index(_waylandSurfaces.begin());
-
-            while (index != _waylandSurfaces.end()) {
-                index->second->KeyMapConfiguration(information, size);
-                index++;
-            }
-
-            _keyMapConfiguration = std::string(information, size);
-
-            _adminLock.Unlock();
-        }
-        void Key(const uint32_t key, const IKeyboard::state action, const uint32_t time)
-        {
-            _adminLock.Lock();
-
-            if ((_keyboardReceiver != nullptr) && (_keyboardReceiver->_keyboard != nullptr)) {
-                _keyboardReceiver->_keyboard->Direct(key, action);
-            }
-
-            _adminLock.Unlock();
-        }
-        void Modifiers(uint32_t depressedMods, uint32_t latchedMods, uint32_t lockedMods, uint32_t group)
-        {
-            _adminLock.Lock();
-
-            if ((_keyboardReceiver != nullptr) && (_keyboardReceiver->_keyboard != nullptr)) {
-                _keyboardReceiver->_keyboard->Modifiers(depressedMods, latchedMods, lockedMods, group);
-            }
-
-            _adminLock.Unlock();
-        }
-        void Repeat(int32_t rate, int32_t delay)
-        {
-            _adminLock.Lock();
-
-            if ((_keyboardReceiver != nullptr) && (_keyboardReceiver->_keyboard != nullptr)) {
-                _keyboardReceiver->_keyboard->Repeat(rate, delay);
-            }
-
-            _adminLock.Unlock();
-        }
-
-        // Wayland related info
-        struct wl_display* _display;
-        struct wl_registry* _registry;
-        struct wl_compositor* _compositor;
-        struct wl_seat* _seat;
-        struct wl_simple_shell* _simpleShell;
-        struct wl_output* _output;
-        struct wl_keyboard* _keyboard;
-        struct wl_pointer* _pointer;
-        struct wl_touch* _touch;
-        struct wl_shell* _shell;
-
-        // KeyBoardInfo
-        uint32_t _keyRate;
-        uint32_t _keyDelay;
-        uint32_t _keyModifiers;
-
-        sem_t _trigger;
-        sem_t _redraw;
-
-    private:
-        friend class Surface;
-        friend class Image;
-
-        pthread_t _tid;
-
-        const std::string _displayName;
-        SurfaceImplementation* _keyboardReceiver;
-        SurfaceImplementation* _pointerReceiver;
-
-        std::string _keyMapConfiguration;
-
-        // EGL related info, if initialized and used.
-        EGLDisplay _eglDisplay;
-        EGLConfig _eglConfig;
-        EGLContext _eglContext;
-
-        // Abstraction representations
-        int _threadId;
-        bool _collect;
-        SurfaceMap _surfaces;
-
-        Rectangle _physical;
-        mutable ICallback* _clientHandler;
-
-        // Signal handler
-        int _signal;
-        int _thread;
-
-        // Process wide singleton
-        static CriticalSection _adminLock;
-        static std::string _runtimeDir;
-        static DisplayMap _displays;
-        static WaylandSurfaceMap _waylandSurfaces;
-
-        mutable uint32_t _refCount;
-    };
-} // Wayland
-} // WPEFramework
-
-#endif // WAYLAND_CPP_ABSTRACTION_H
diff --git a/Compositor/lib/Wayland/Client/Module.h b/Compositor/lib/Wayland/Client/Module.h
deleted file mode 100644
index caa9c89..0000000
--- a/Compositor/lib/Wayland/Client/Module.h
+++ /dev/null
@@ -1,14 +0,0 @@
-#ifndef __MODULE_COMPOSITION_CLIENT_H
-#define __MODULE_COMPOSITION_CLIENT_H
-
-#ifndef MODULE_NAME
-#define MODULE_NAME Composition_Client
-#endif
-
-#include <core/core.h>
-#include <tracing/tracing.h>
-
-#undef EXTERNAL
-#define EXTERNAL
-
-#endif // __MODULE_COMPOSITION_CLIENT_H
diff --git a/Compositor/lib/Wayland/Client/Westeros.cpp b/Compositor/lib/Wayland/Client/Westeros.cpp
deleted file mode 100644
index 8b4cbc4..0000000
--- a/Compositor/lib/Wayland/Client/Westeros.cpp
+++ /dev/null
@@ -1,1167 +0,0 @@
-#include "Implementation.h"
-
-#include <EGL/egl.h>
-#include <EGL/eglext.h>
-
-#include <GLES2/gl2.h>
-#include <GLES2/gl2ext.h>
-
-#include <simpleshell-client-protocol.h>
-#include <wayland-client-core.h>
-#include <wayland-client.h>
-#include <wayland-egl.h>
-
-#include <poll.h>
-#include <pthread.h>
-#include <signal.h>
-#include <string.h>
-#include <sys/mman.h>
-#include <sys/signalfd.h>
-#include <unistd.h>
-
-// logical xor
-#define XOR(a, b) ((!a && b) || (a && !b))
-
-using namespace WPEFramework;
-
-#define Trace(fmt, args...) fprintf(stderr, "[pid=%d][Client %s:%d] : " fmt, getpid(), __FILE__, __LINE__, ##args)
-
-#define RED_SIZE (8)
-#define GREEN_SIZE (8)
-#define BLUE_SIZE (8)
-#define ALPHA_SIZE (8)
-#define DEPTH_SIZE (0)
-
-static const struct wl_shell_surface_listener g_ShellSurfaceListener = {
-    //handle_ping,
-    [](void* data, struct wl_shell_surface* shell_surface, uint32_t serial) {
-        wl_shell_surface_pong(shell_surface, serial);
-    },
-    //handle_configure,
-    [](void* data, struct wl_shell_surface* shell_surface, uint32_t edges, int32_t width, int32_t height) {
-        Trace("handle_configure: width=%d height=%d \n", width, height);
-        //  Wayland::Display::Sur *wayland = static_cast<Wayland *>(data);
-        // wl_egl_window_resize(wayland->eglWindow, width, height, 0, 0);
-    },
-    //handle_popup_done
-    [](void* data, struct wl_shell_surface* shell_surface) {
-    }
-};
-
-struct wl_shm_listener shmListener = {
-    // shmFormat
-    [](void* data, struct wl_shm* wl_shm, uint32_t format) {
-        Trace("shm format: %X\n", format);
-    }
-};
-
-static const struct wl_output_listener outputListener = {
-    // outputGeometry
-    [](void* data, struct wl_output* output, int32_t x, int32_t y, int32_t physical_width, int32_t physical_height, int32_t subpixel, const char* make, const char* model, int32_t transform) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        Trace("wl_output_listener.outputGeometry x=%d y=%d physical_width=%d physical_height=%d, make=%s: model=%s transform=%d subpixel%d\n",
-            x, y, physical_width, physical_height, make, model, transform, subpixel);
-        Wayland::Display::Rectangle& rect(const_cast<Wayland::Display::Rectangle&>(context.Physical()));
-        rect.X = x;
-        rect.Y = y;
-        rect.Width = physical_width;
-        rect.Height = physical_height;
-    },
-    // outputMode
-    [](void* data, struct wl_output* output, uint32_t flags, int32_t width, int32_t height, int32_t refresh) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        const Wayland::Display::Rectangle& rect(context.Physical());
-
-        if ((flags & WL_OUTPUT_MODE_CURRENT) && ((width != rect.Width) || (height != rect.Height))) {
-            Wayland::Display::Rectangle& rect(const_cast<Wayland::Display::Rectangle&>(context.Physical()));
-            rect.Width = width;
-            rect.Height = height;
-            Trace("wl_output_listener.outputMode [0,0,%d,%d]\n", width, height);
-        }
-    },
-    // outputDone
-    [](void* data, struct wl_output* output) {
-    },
-    // outputScale
-    [](void* data, struct wl_output* output, int32_t factor) {
-    }
-};
-
-static const struct wl_keyboard_listener keyboardListener = {
-    // keyboardKeymap
-    [](void* data, struct wl_keyboard* keyboard, uint32_t format, int32_t fd, uint32_t size) {
-        if (format != WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1) {
-            close(fd);
-        } else {
-            void* mapping = ::mmap(nullptr, size, PROT_READ, MAP_SHARED, fd, 0);
-            if (mapping == MAP_FAILED) {
-                close(fd);
-            } else {
-
-                Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-                context.KeyMapConfiguration(static_cast<const char*>(mapping), size);
-                munmap(mapping, size);
-                close(fd);
-            }
-        }
-        Trace("wl_keyboard_listener.keyboardKeymap [%d,%d]\n", format, size);
-    },
-    // keyboardEnter,
-    [](void* data, struct wl_keyboard* keyboard, uint32_t serial, struct wl_surface* surface, struct wl_array* keys) {
-        Trace("wl_keyboard_listener.keyboardEnter serial=%d\n", serial);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        context.FocusKeyboard(surface, true);
-    },
-    // keyboardLeave,
-    [](void* data, struct wl_keyboard* keyboard, uint32_t serial, struct wl_surface* surface) {
-        Trace("wl_keyboard_listener.keyboardLeave serial=%d\n", serial);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        context.FocusKeyboard(surface, false);
-    },
-    // keyboardKey
-    [](void* data, struct wl_keyboard* keyboard, uint32_t serial, uint32_t time, uint32_t key, uint32_t state) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        // Have no idea if this is true, just lets see...
-        assert(keyboard == context._keyboard);
-
-        Wayland::Display::IKeyboard::state action;
-        switch (state) {
-        case WL_KEYBOARD_KEY_STATE_RELEASED:
-            action = Wayland::Display::IKeyboard::released;
-            break;
-        case WL_KEYBOARD_KEY_STATE_PRESSED:
-            action = Wayland::Display::IKeyboard::pressed;
-            break;
-        default:
-            action = static_cast<Wayland::Display::IKeyboard::state>(state);
-        }
-        context.Key(key, action, time);
-
-        Trace("wl_keyboard_listener.keyboardKey [0x%02X, %s, 0x%02X ]\n", key, state == WL_KEYBOARD_KEY_STATE_PRESSED ? "Pressed" : "Released", context._keyModifiers);
-    },
-    // keyboardModifiers
-    [](void* data, struct wl_keyboard* keyboard, uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched, uint32_t mods_locked, uint32_t group) {
-        Trace("wl_keyboard_listener.keyboardModifiers [%d,%d,%d]\n", mods_depressed, mods_latched, mods_locked);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        context.Modifiers(mods_depressed, mods_latched, mods_locked, group);
-    },
-    // keyboardRepeatInfo
-    [](void* data, struct wl_keyboard* keyboard, int32_t rate, int32_t delay) {
-        Trace("wl_keyboard_listener.keyboardRepeatInfo [%d,%d]\n", rate, delay);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        context.Repeat(rate, delay);
-    }
-};
-
-static const struct wl_pointer_listener pointerListener = {
-    // pointerEnter
-    [](void* data, struct wl_pointer* pointer, uint32_t serial, struct wl_surface* surface, wl_fixed_t sx, wl_fixed_t sy) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        int x, y;
-
-        x = wl_fixed_to_int(sx);
-        y = wl_fixed_to_int(sy);
-
-        Trace("wl_pointer_listener.pointerEnter [%d,%d]\n", x, y);
-        context.FocusPointer(surface, true);
-    },
-    // pointerLeave
-    [](void* data, struct wl_pointer* pointer, uint32_t serial, struct wl_surface* surface) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-        Trace("wl_pointer_listener.pointerLeave [%p]\n", surface);
-        context.FocusPointer(surface, false);
-    },
-    // pointerMotion
-    [](void* data, struct wl_pointer* pointer, uint32_t time, wl_fixed_t sx, wl_fixed_t sy) {
-        int x, y;
-
-        x = wl_fixed_to_int(sx);
-        y = wl_fixed_to_int(sy);
-
-        Trace("wl_pointer_listener.pointerMotion [%d,%d]\n", x, y);
-    },
-    // pointerButton
-    [](void* data, struct wl_pointer* pointer, uint32_t serial, uint32_t time, uint32_t button, uint32_t state) {
-        Trace("wl_pointer_listener.pointerButton [%u,%u]\n", button, state);
-    },
-    // pointerAxis
-    [](void* data, struct wl_pointer* pointer, uint32_t time, uint32_t axis, wl_fixed_t value) {
-        int v;
-        v = wl_fixed_to_int(value);
-        Trace("wl_pointer_listener.pointerAxis [%u,%d]\n", axis, v);
-    }
-};
-
-static const struct wl_seat_listener seatListener = {
-    // seatCapabilities,
-    [](void* data, struct wl_seat* seat, uint32_t capabilities) {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        Trace("wl_seat_listener.seatCapabilities [%p,%d]\n", seat, capabilities);
-
-        if (capabilities & WL_SEAT_CAPABILITY_KEYBOARD) {
-            context._keyboard = wl_seat_get_keyboard(context._seat);
-            wl_keyboard_add_listener(context._keyboard, &keyboardListener, data);
-            Trace("wl_seat_listener.keyboard [%p,%p]\n", seat, context._keyboard);
-        }
-        if (capabilities & WL_SEAT_CAPABILITY_POINTER) {
-            context._pointer = wl_seat_get_pointer(context._seat);
-            wl_pointer_add_listener(context._pointer, &pointerListener, data);
-            Trace("wl_seat_listener.pointer [%p,%p]\n", seat, context._pointer);
-        }
-        if (capabilities & WL_SEAT_CAPABILITY_TOUCH) {
-            context._touch = wl_seat_get_touch(context._seat);
-            Trace("wl_seat_listener.touch [%p,%p]\n", seat, context._touch);
-        }
-    },
-    // seatName
-    [](void* data, struct wl_seat* seat, const char* name) {
-        Trace("wl_seat_listener.seatName[%p,%s]\n", seat, name);
-    }
-};
-
-static const struct wl_simple_shell_listener simpleShellListener = {
-    // surface_id
-    [](void* data, struct wl_simple_shell* shell, struct wl_surface* surface, uint32_t surfaceId) {
-        Trace("wl_simple_shell_listener.surface_id shell=%p wl_surface=%p surfaceId=%d\n", shell, surface, surfaceId);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        // Have no idea if this is true, just lets see...
-        assert(shell == context._simpleShell);
-        context.Constructed(surfaceId, surface);
-
-        Wayland::Display::Surface waylandSurface;
-        context.Get(surfaceId, waylandSurface);
-
-        if ((waylandSurface.IsValid() == true) && (waylandSurface.UpScale() == true)) {
-            Trace("wl_simple_shell_listener.surface_id upscaling %s to (%dx%d)\n",
-                waylandSurface.Name().c_str(), context.Physical().Width, context.Physical().Height);
-
-            wl_simple_shell_set_geometry(shell, surfaceId, context.Physical().X, context.Physical().Y,
-                context.Physical().Width, context.Physical().Height);
-        }
-    },
-    // surface_created
-    [](void* data, struct wl_simple_shell* shell, uint32_t surfaceId, const char* name) {
-        Trace("wl_simple_shell_listener.surface_created shell=%p name=%s surfaceId=%d\n", shell, name, surfaceId);
-    },
-    // surface_destroyed
-    [](void* data, struct wl_simple_shell* shell, uint32_t surfaceId, const char* name) {
-        Trace("wl_simple_shell_listener.surface_destroyed shell=%p name=%s surfaceId=%d\n", shell, name, surfaceId);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        // Have no idea if this is true, just lets see...
-        assert(shell == context._simpleShell);
-
-        context.Destructed(surfaceId);
-        Trace("wl_simple_shell_listener.surface_destroyed surfaceId=%d\n", surfaceId);
-    },
-    // surface_status
-    [](void* data, struct wl_simple_shell* shell, uint32_t surfaceId, const char* name, uint32_t visible,
-        int32_t x, int32_t y, int32_t width, int32_t height, wl_fixed_t opacity, wl_fixed_t zorder) {
-        Trace("surface_status surfaceId=%d name=%s width=%d  height=%d x=%d, y=%d visible=%d opacity=%d zorder=%d\n", surfaceId, name, width, height, x, y, visible, opacity, zorder);
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        // Have no idea if this is true, just lets see...
-        assert(shell == context._simpleShell);
-
-        context.Dimensions(surfaceId, visible, x, y, width, height, opacity, zorder);
-
-        context.Constructed(surfaceId, name);
-        Trace("wl_simple_shell_listener.surface_status surfaceId=%d\n", surfaceId);
-    },
-    // get_surfaces_done
-    [](void* data, struct wl_simple_shell* shell) {
-        Trace("wl_simple_shell_listener.get_surfaces_done shell=%p\n", shell);
-    }
-};
-
-static const struct wl_registry_listener globalRegistryListener = {
-
-    // global
-    [](void* data, struct wl_registry* registry, uint32_t name, const char* interface, uint32_t version) {
-        Trace("wl_registry_listener.global interface=%s name=%d version=%d\n", interface, name, version);
-
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        if (::strcmp(interface, "wl_compositor") == 0) {
-            // I expect that a compositor is tied to a display, so expect the name here to be the one of the display.
-            // Lets check :-)
-            context._compositor = static_cast<struct wl_compositor*>(wl_registry_bind(registry, name, &wl_compositor_interface, 1));
-        } else if (::strcmp(interface, "wl_simple_shell") == 0) {
-            // A shell, is probably associated with a client, so I guess we now need to find a client..
-            struct wl_simple_shell* result = static_cast<struct wl_simple_shell*>(wl_registry_bind(registry, name, &wl_simple_shell_interface, 1));
-            wl_simple_shell_add_listener(result, &simpleShellListener, data);
-
-            // This will probably trigger the return of a list of all available services.
-            wl_simple_shell_get_surfaces(result);
-
-            context._simpleShell = result;
-
-            if (context.Collect() == true) {
-                // As we are subscribed, get all surfaces we have..
-                wl_simple_shell_get_surfaces(result);
-            }
-        } else if (::strcmp(interface, "wl_seat") == 0) {
-            // A shell, is probably associated with a client, so I guess we now need to find a client..
-            struct wl_seat* result = static_cast<struct wl_seat*>(wl_registry_bind(registry, name, &wl_seat_interface, 4));
-            wl_seat_add_listener(result, &seatListener, data);
-            context._seat = result;
-        } else if (::strcmp(interface, "wl_shell") == 0) {
-            // A shell, is probably associated with a client, so I guess we now need to find a client..
-            context._shell = static_cast<struct wl_shell*>(wl_registry_bind(registry, name, &wl_shell_interface, 1));
-        } else if (::strcmp(interface, "wl_output") == 0) {
-            struct wl_output* result = static_cast<struct wl_output*>(wl_registry_bind(registry, name, &wl_output_interface, 2));
-            wl_output_add_listener(result, &outputListener, data);
-            context._output = result;
-        }
-    },
-    // global_remove
-    [](void*, struct wl_registry*, uint32_t) {
-        Trace("wl_registry_listener.global_remove\n");
-    },
-};
-
-namespace WPEFramework {
-
-namespace Wayland {
-    /*static*/ Display::CriticalSection Display::_adminLock;
-    /*static*/ std::string Display::_runtimeDir;
-    /*static*/ Display::DisplayMap Display::_displays;
-    /*static*/ Display::WaylandSurfaceMap Display::_waylandSurfaces;
-
-    static void printEGLConfiguration(EGLDisplay dpy, EGLConfig config)
-    {
-#define X(VAL)    \
-    {             \
-        VAL, #VAL \
-    }
-        struct {
-            EGLint attribute;
-            const char* name;
-        } names[] = {
-            X(EGL_BUFFER_SIZE),
-            X(EGL_RED_SIZE),
-            X(EGL_GREEN_SIZE),
-            X(EGL_BLUE_SIZE),
-            X(EGL_ALPHA_SIZE),
-            X(EGL_CONFIG_CAVEAT),
-            X(EGL_CONFIG_ID),
-            X(EGL_DEPTH_SIZE),
-            X(EGL_LEVEL),
-            X(EGL_MAX_PBUFFER_WIDTH),
-            X(EGL_MAX_PBUFFER_HEIGHT),
-            X(EGL_MAX_PBUFFER_PIXELS),
-            X(EGL_NATIVE_RENDERABLE),
-            X(EGL_NATIVE_VISUAL_ID),
-            X(EGL_NATIVE_VISUAL_TYPE),
-            X(EGL_SAMPLE_BUFFERS),
-            X(EGL_SAMPLES),
-            X(EGL_SURFACE_TYPE),
-            X(EGL_TRANSPARENT_TYPE),
-        };
-#undef X
-
-        Trace("Config details:\n");
-        for (unsigned int j = 0; j < sizeof(names) / sizeof(names[0]); j++) {
-            EGLint value = -1;
-            EGLBoolean res = eglGetConfigAttrib(dpy, config, names[j].attribute, &value);
-            if (res) {
-                Trace("  - %s: %d (0x%x)\n", names[j].name, value, value);
-            }
-        }
-    }
-
-    Display::SurfaceImplementation::SurfaceImplementation(Display& display, const std::string& name, const uint32_t width, const uint32_t height)
-        : _surface(nullptr)
-        , _refcount(1)
-        , _level(0)
-        , _name(name)
-        , _id(0)
-        , _x(0)
-        , _y(0)
-        , _width(width)
-        , _height(height)
-        , _visible(0)
-        , _opacity(0)
-        , _ZOrder(0)
-        , _display(&display)
-        , _native(nullptr)
-        , _frameCallback(nullptr)
-        , _eglSurfaceWindow(EGL_NO_SURFACE)
-        , _keyboard(nullptr)
-        , _pointer(nullptr)
-        , _upScale(false)
-    {
-        assert(display.IsOperational());
-
-        _level = 0;
-
-        _surface = wl_compositor_create_surface(display._compositor);
-
-        if (_surface != nullptr) {
-
-            struct wl_region* region;
-            region = wl_compositor_create_region(display._compositor);
-
-            wl_region_add(region, 0, 0, width, height);
-
-            // Found in WPEwayland implementation:
-            wl_surface_set_opaque_region(_surface, nullptr);
-
-            wl_region_destroy(region);
-
-            Trace("Creating a surface of size: %d x %d\n", width, height);
-
-            _native = wl_egl_window_create(_surface, width, height);
-
-            assert(EGL_NO_SURFACE != _native);
-
-            if (_native != EGL_NO_SURFACE) {
-
-                _shellSurface = wl_shell_get_shell_surface(display._shell, _surface);
-
-                wl_shell_surface_add_listener(_shellSurface, &g_ShellSurfaceListener, this);
-            }
-
-            if (_display->HasEGLContext() == true) {
-                Connect(EGLSurface(EGL_NO_SURFACE));
-            }
-        }
-    }
-
-    Display::SurfaceImplementation::SurfaceImplementation(Display& display, const uint32_t id, struct wl_surface* surface)
-        : _surface(surface)
-        , _refcount(1)
-        , _level(2)
-        , _name()
-        , _id(id)
-        , _width(0)
-        , _height(0)
-        , _visible(0)
-        , _opacity(0)
-        , _ZOrder(0)
-        , _display(&display)
-        , _native(nullptr)
-        , _frameCallback(nullptr)
-        , _shellSurface(nullptr)
-        , _eglSurfaceWindow(EGL_NO_SURFACE)
-        , _keyboard(nullptr)
-        , _pointer(nullptr)
-        , _upScale(false)
-    {
-    }
-
-    Display::SurfaceImplementation::SurfaceImplementation(Display& display, const uint32_t id, const char* name)
-        : _surface(nullptr)
-        , _refcount(1)
-        , _level(2)
-        , _name(name)
-        , _id(id)
-        , _width(0)
-        , _height(0)
-        , _visible(0)
-        , _opacity(0)
-        , _ZOrder(0)
-        , _display(&display)
-        , _native(nullptr)
-        , _frameCallback(nullptr)
-        , _shellSurface(nullptr)
-        , _eglSurfaceWindow(EGL_NO_SURFACE)
-        , _keyboard(nullptr)
-        , _pointer(nullptr)
-        , _upScale(false)
-    {
-    }
-
-    void Display::SurfaceImplementation::Callback(wl_callback_listener* listener, void* data)
-    {
-
-        assert((listener == nullptr) ^ (_frameCallback == nullptr));
-
-        if (listener != nullptr) {
-
-            _frameCallback = wl_surface_frame(_surface);
-            wl_callback_add_listener(_frameCallback, listener, data);
-
-            eglSwapBuffers(_display->_eglDisplay, _eglSurfaceWindow);
-        } else {
-            wl_callback_destroy(_frameCallback);
-            _frameCallback = nullptr;
-        }
-    }
-
-    void Display::SurfaceImplementation::Resize(const int dx, const int dy, const int width, const int height)
-    {
-        Trace("SimpleShell Geometry  %s to h%dpx x w%dpx at position x=%d y=%d\n", _name.c_str(), width, height, dy, dy);
-        wl_simple_shell_set_geometry(_display->_simpleShell, _id, dx, dy, width, height);
-
-        Redraw();
-
-        _width = width;
-        _height = height;
-        _x = dx;
-        _y = dy;
-    }
-
-    void Display::SurfaceImplementation::Visibility(const bool visible)
-    {
-        wl_simple_shell_set_visible(_display->_simpleShell, _id, (visible ? 1 : 0));
-        wl_display_flush(_display->_display);
-        Redraw();
-    }
-
-    void Display::SurfaceImplementation::Opacity(const uint32_t opacity)
-    {
-        wl_simple_shell_set_opacity(_display->_simpleShell, _id, opacity);
-        wl_display_flush(_display->_display);
-        Redraw();
-    }
-
-    void Display::SurfaceImplementation::ZOrder(const uint32_t order)
-    {
-        wl_simple_shell_set_zorder(_display->_simpleShell, _id, order);
-        wl_display_flush(_display->_display);
-        Redraw();
-    }
-
-    void Display::SurfaceImplementation::BringToFront()
-    {
-        wl_shell_surface_set_toplevel(_shellSurface);
-        wl_display_flush(_display->_display);
-        Redraw();
-    }
-
-    void Display::SurfaceImplementation::SetTop()
-    {
-        wl_simple_shell_set_zorder(_display->_simpleShell, _id, 0);
-        wl_display_flush(_display->_display);
-        Redraw();
-    }
-
-    void Display::SurfaceImplementation::Dimensions(
-        const uint32_t visible,
-        const int32_t x, const int32_t y, const int32_t width, const int32_t height,
-        const uint32_t opacity,
-        const uint32_t zorder)
-    {
-        Trace("Updated surfaceId=%d width=%d  height=%d x=%d, y=%d visible=%d opacity=%d zorder=%d\n", _id, width, height, x, y, visible, opacity, zorder);
-
-        _visible = visible;
-        _opacity = opacity;
-        _ZOrder = zorder;
-        // This is the response form the status, but if we created the window, we need to check
-        // and set according to the request.
-        if (_native != nullptr) {
-            if ((_width != width) || (_height != height) || (_x != x) || (_y != y)) {
-                Trace("Resizing surface %d from [%d x %d] to [%d x %d]\n", _id, _width, _height, width, height);
-                wl_egl_window_resize(_native, _width, _height, x, y);
-            }
-        } else {
-            // Update this surface
-            Trace("Update surface %d from [%d x %d] to [%d x %d]\n", _id, _width, _height, width, height);
-            _x = x;
-            _y = y;
-            _width = width;
-            _height = height;
-        }
-
-        wl_display_flush(_display->_display);
-
-        Trace("Current surfaceId=%d width=%d  height=%d x=%d, y=%d, visible=%d opacity=%d zorder=%d\n", _id, _width, _height, _x, _y, _visible, _opacity, _ZOrder);
-    }
-
-    void Display::SurfaceImplementation::Redraw()
-    {
-        _display->Trigger();
-
-        // wait for wayland to flush events
-        sem_wait(&(_display->_redraw));
-        if (_native != nullptr) {
-            eglSwapBuffers(_display->_eglDisplay, _eglSurfaceWindow);
-        }
-    }
-
-    void Display::SurfaceImplementation::Unlink()
-    {
-        if (_display != nullptr) {
-
-            if (_frameCallback != nullptr) {
-                wl_callback_destroy(_frameCallback);
-            }
-
-            if (_eglSurfaceWindow != EGL_NO_SURFACE) {
-
-                eglDestroySurface(_display->_eglDisplay, _eglSurfaceWindow);
-                _eglSurfaceWindow = EGL_NO_SURFACE;
-            }
-
-            if (_native != nullptr) {
-                wl_egl_window_destroy(_native);
-                _native = nullptr;
-            }
-
-            if (_shellSurface != nullptr) {
-                wl_shell_surface_destroy(_shellSurface);
-                _shellSurface = nullptr;
-            }
-
-            if (_surface != nullptr) {
-                wl_surface_destroy(_surface);
-                _surface = nullptr;
-            }
-
-            _display = nullptr;
-        }
-    }
-
-    bool Display::SurfaceImplementation::Connect(const EGLSurface& surface)
-    {
-        if (surface != EGL_NO_SURFACE) {
-            _eglSurfaceWindow = surface;
-        } else {
-            if (_display->_eglContext == EGL_NO_CONTEXT) {
-                _display->InitializeEGL();
-            }
-
-            if (_display->_eglContext != EGL_NO_CONTEXT) {
-                /*
-                 * Create a window surface
-                 */
-                _eglSurfaceWindow = eglCreateWindowSurface(
-                    _display->_eglDisplay,
-                    _display->_eglConfig,
-                    reinterpret_cast<EGLNativeWindowType>(_native),
-                    nullptr);
-
-                if (_eglSurfaceWindow == EGL_NO_SURFACE) {
-
-                    _eglSurfaceWindow = eglCreateWindowSurface(
-                        _display->_eglDisplay,
-                        _display->_eglConfig,
-                        static_cast<EGLNativeWindowType>(nullptr),
-                        nullptr);
-                }
-
-                assert(EGL_NO_SURFACE != _eglSurfaceWindow);
-
-                EGLint height(0);
-                EGLint width(0);
-                eglQuerySurface(_display->_eglDisplay, _eglSurfaceWindow, EGL_WIDTH, &width);
-                eglQuerySurface(_display->_eglDisplay, _eglSurfaceWindow, EGL_HEIGHT, &height);
-
-                Trace("EGL window surface is %dx%d\n", height, width);
-            }
-        }
-
-        if (_eglSurfaceWindow != EGL_NO_SURFACE) {
-            /*
-             * Establish EGL context for this thread
-             */
-
-            int result = eglMakeCurrent(_display->_eglDisplay, _eglSurfaceWindow, _eglSurfaceWindow, _display->_eglContext);
-            assert(EGL_FALSE != result);
-
-            if (EGL_FALSE != result) {
-                result = eglSwapInterval(_display->_eglDisplay, 1);
-                assert(EGL_FALSE != result);
-            }
-        }
-
-        return (_eglSurfaceWindow != EGL_NO_SURFACE);
-    }
-
-    Display::ImageImplementation::ImageImplementation(Display& display, const uint32_t texture, const uint32_t width, const uint32_t height)
-        : _refcount(1)
-        , _display(&display)
-    {
-        _eglImageKHR = eglCreateImageKHR(_display->_eglDisplay, _display->_eglContext, EGL_GL_TEXTURE_2D_KHR,
-            reinterpret_cast<EGLClientBuffer>(texture), 0);
-    }
-
-    Display::ImageImplementation::~ImageImplementation()
-    {
-        if (_display != nullptr) {
-            eglDestroyImageKHR(_display->_eglDisplay, _eglImageKHR);
-        }
-    }
-
-    static void* Processor(void* data)
-    {
-        Wayland::Display& context = *(static_cast<Wayland::Display*>(data));
-
-        while ((sem_wait(&context._trigger) == 0) && (context._display != nullptr)) {
-            Trace("Flush Events\n");
-            wl_display_flush(context._display);
-
-            context.Redraw();
-        }
-        return nullptr;
-    }
-
-    void Display::Initialize()
-    {
-        if (_display != nullptr)
-            return;
-
-        if (_runtimeDir.empty() == true) {
-            const char* envName = ::getenv("XDG_RUNTIME_DIR");
-            if (envName != nullptr) {
-                _runtimeDir = envName;
-            }
-        }
-
-        Trace("Initialize Wayland Display on %s\n", _runtimeDir.c_str());
-        Trace("Initialize Wayland Display Name %s\n", _displayName.c_str());
-
-        _display = wl_display_connect(nullptr);
-
-        assert(_display != nullptr);
-
-        if (_display != nullptr) {
-            _registry = wl_display_get_registry(_display);
-
-            assert(_registry != nullptr);
-
-            if (_registry != nullptr) {
-
-                wl_registry_add_listener(_registry, &globalRegistryListener, this);
-                wl_display_roundtrip(_display);
-
-                sem_init(&_trigger, 0, 0);
-                sem_init(&_redraw, 0, 0);
-
-                Trace("creating communication thread\n");
-                if (pthread_create(&_tid, nullptr, Processor, this) != 0) {
-                    Trace("[Wayland] Error creating communication thread\n");
-                }
-            }
-        }
-    }
-
-    void Display::InitializeEGL()
-    {
-        /*
-         * Get default EGL display
-         */
-        _eglDisplay = eglGetDisplay(reinterpret_cast<NativeDisplayType>(_display));
-
-        Trace("Display: %p\n", _eglDisplay);
-
-        if (_eglDisplay == EGL_NO_DISPLAY) {
-            Trace("Oops bad Display: %p\n", _eglDisplay);
-        } else {
-            /*
-             * Initialize display
-             */
-            EGLint major, minor;
-            if (eglInitialize(_eglDisplay, &major, &minor) != EGL_TRUE) {
-                Trace("Unable to initialize EGL: %X\n", eglGetError());
-            } else {
-                /*
-                 * Get number of available configurations
-                 */
-                EGLint configCount;
-                Trace("Vendor: %s\n", eglQueryString(_eglDisplay, EGL_VENDOR));
-                Trace("Version: %d.%d\n", major, minor);
-
-                if (eglGetConfigs(_eglDisplay, nullptr, 0, &configCount)) {
-
-                    EGLConfig eglConfigs[configCount];
-
-                    EGLint attributes[] = {
-                        EGL_RED_SIZE, RED_SIZE,
-                        EGL_GREEN_SIZE, GREEN_SIZE,
-                        EGL_BLUE_SIZE, BLUE_SIZE,
-                        EGL_DEPTH_SIZE, DEPTH_SIZE,
-                        EGL_STENCIL_SIZE, 0,
-                        EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
-                        EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
-                        EGL_NONE
-                    };
-
-                    Trace("Configs: %d\n", configCount);
-                    /*
-                     * Get a list of configurations that meet or exceed our requirements
-                     */
-                    if (eglChooseConfig(_eglDisplay, attributes, eglConfigs, configCount, &configCount)) {
-
-                        /*
-                         * Choose a suitable configuration
-                         */
-                        int index = 0;
-
-                        while (index < configCount) {
-                            EGLint redSize, greenSize, blueSize, alphaSize, depthSize;
-
-                            eglGetConfigAttrib(_eglDisplay, eglConfigs[index], EGL_RED_SIZE, &redSize);
-                            eglGetConfigAttrib(_eglDisplay, eglConfigs[index], EGL_GREEN_SIZE, &greenSize);
-                            eglGetConfigAttrib(_eglDisplay, eglConfigs[index], EGL_BLUE_SIZE, &blueSize);
-                            eglGetConfigAttrib(_eglDisplay, eglConfigs[index], EGL_ALPHA_SIZE, &alphaSize);
-                            eglGetConfigAttrib(_eglDisplay, eglConfigs[index], EGL_DEPTH_SIZE, &depthSize);
-
-                            if ((redSize == RED_SIZE) && (greenSize == GREEN_SIZE) && (blueSize == BLUE_SIZE) && (alphaSize == ALPHA_SIZE) && (depthSize >= DEPTH_SIZE)) {
-                                break;
-                            }
-
-                            index++;
-                        }
-                        if (index < configCount) {
-                            _eglConfig = eglConfigs[index];
-
-                            EGLint attributes[] = { EGL_CONTEXT_CLIENT_VERSION, 2 /* ES2 */, EGL_NONE };
-
-                            Trace("Config choosen: %d\n", index);
-                            printEGLConfiguration(_eglDisplay, _eglConfig);
-
-                            /*
-                             * Create an EGL context
-                             */
-                            _eglContext = eglCreateContext(_eglDisplay, _eglConfig, EGL_NO_CONTEXT, attributes);
-
-                            Trace("Context created\n");
-                        }
-                    }
-                }
-                Trace("Extentions: %s\n", eglQueryString(_eglDisplay, EGL_EXTENSIONS));
-            }
-        }
-    }
-
-    void Display::Deinitialize()
-    {
-        _adminLock.Lock();
-
-        _keyboardReceiver = nullptr;
-
-        // First notify our client of our destruction...
-        SurfaceMap::iterator index(_surfaces.begin());
-
-        while (index != _surfaces.end()) {
-            // Remove the entry from global list
-            WaylandSurfaceMap::iterator entry(_waylandSurfaces.find(index->second->_surface));
-
-            if (entry != _waylandSurfaces.end()) {
-                entry->second->Release();
-                _waylandSurfaces.erase(entry);
-            }
-
-            index->second->Unlink();
-            index->second->Release();
-            index++;
-        }
-
-        WaylandSurfaceMap::iterator entry(_waylandSurfaces.begin());
-
-        while (entry != _waylandSurfaces.end()) {
-
-            entry->second->Release();
-            entry++;
-        }
-
-        _waylandSurfaces.clear();
-        _surfaces.clear();
-
-        if (_eglContext != EGL_NO_CONTEXT) {
-            eglMakeCurrent(_eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
-            eglTerminate(_eglDisplay);
-            eglReleaseThread();
-        }
-        if (_output != nullptr) {
-            wl_output_destroy(_output);
-            _output = nullptr;
-        }
-
-        if (_simpleShell != nullptr) {
-            wl_simple_shell_destroy(_simpleShell);
-            _simpleShell = nullptr;
-        }
-
-        if (_shell != nullptr) {
-            wl_shell_destroy(_shell);
-            _shell = nullptr;
-        }
-
-        if (_seat != nullptr) {
-            wl_seat_destroy(_seat);
-            _seat = nullptr;
-        }
-
-        if (_keyboard) {
-            wl_keyboard_destroy(_keyboard);
-            _keyboard = nullptr;
-        }
-
-        if (_compositor != nullptr) {
-            wl_compositor_destroy(_compositor);
-            _compositor = nullptr;
-        }
-
-        if (_registry != nullptr) {
-            wl_registry_destroy(_registry);
-            _registry = nullptr;
-        }
-        if (_display != nullptr) {
-            wl_display_disconnect(_display);
-            _display = nullptr;
-        }
-        _adminLock.Unlock();
-
-        Trigger();
-
-        pthread_join(_tid, nullptr);
-    }
-
-    void Display::LoadSurfaces()
-    {
-        _collect |= true;
-
-        if (_simpleShell != nullptr) {
-            // As we are subscribed, get all surfaces we have..
-            wl_simple_shell_get_surfaces(_simpleShell);
-        }
-    }
-
-    Compositor::IDisplay::ISurface* Display::Create(const std::string& name, const uint32_t width, const uint32_t height)
-    {
-        IDisplay::ISurface* result = nullptr;
-
-        _adminLock.Lock();
-
-        SurfaceImplementation* surface = new SurfaceImplementation(*this, name, width, height);
-
-        // Wait till we are fully registered.
-        _waylandSurfaces.insert(std::pair<struct wl_surface*, SurfaceImplementation*>(surface->_surface, surface));
-
-        result = surface;
-
-        _adminLock.Unlock();
-
-        return (result);
-    }
-
-    Display::Image Display::Create(const uint32_t texture, const uint32_t width, const uint32_t height)
-    {
-        return (Image(*new ImageImplementation(*this, texture, width, height)));
-    }
-
-    void Display::Constructed(const uint32_t id, wl_surface* surface)
-    {
-        _adminLock.Lock();
-
-        WaylandSurfaceMap::iterator index = _waylandSurfaces.find(surface);
-
-        if (index != _waylandSurfaces.end()) {
-            wl_simple_shell_set_name(_simpleShell, id, index->second->Name().c_str());
-            // Do not forget to update the actual surface, it is now alive..
-            index->second->_id = id;
-            index->second->AddRef();
-            _surfaces.insert(std::pair<uint32_t, Display::SurfaceImplementation*>(id, index->second));
-        } else if (_collect == true) {
-            // Seems this is a surface, we did not create.
-            Display::SurfaceImplementation* entry(new Display::SurfaceImplementation(*this, id, surface));
-            entry->AddRef();
-            _surfaces.insert(std::pair<uint32_t, Display::SurfaceImplementation*>(id, entry));
-            _waylandSurfaces.insert(std::pair<wl_surface*, Display::SurfaceImplementation*>(surface, entry));
-        }
-
-        if (_clientHandler != nullptr) {
-            _clientHandler->Attached(id);
-        }
-
-        _adminLock.Unlock();
-    }
-
-    void Display::Constructed(const uint32_t id, const char* name)
-    {
-        _adminLock.Lock();
-
-        SurfaceMap::iterator index = _surfaces.find(id);
-
-        if (index != _surfaces.end()) {
-            index->second->Name(name);
-        }
-
-        if (_collect == true) {
-            Display::SurfaceImplementation* entry = new Display::SurfaceImplementation(*this, id, name);
-
-            // manual increase the refcount for the _waylandSurfaces map.
-            entry->AddRef();
-
-            // Somewhere, someone, created a surface, register it.
-            _surfaces.insert(std::pair<uint32_t, Display::SurfaceImplementation*>(id, entry));
-        }
-
-        if (_clientHandler != nullptr) {
-            _clientHandler->Attached(id);
-        }
-        _adminLock.Unlock();
-    }
-
-    void Display::Dimensions(
-        const uint32_t id,
-        const uint32_t visible,
-        const int32_t x, const int32_t y, const int32_t width, const int32_t height,
-        const uint32_t opacity,
-        const uint32_t zorder)
-    {
-        Trace("Updated Dimensions surfaceId=%d width=%d  height=%d x=%d, y=%d visible=%d opacity=%d zorder=%d\n", id, width, height, x, y, visible, opacity, zorder);
-        _adminLock.Lock();
-
-        SurfaceMap::iterator index = _surfaces.find(id);
-
-        if (index != _surfaces.end()) {
-            Trace("Updated Dimensions surfaceId=%d name=%s width=%d  height=%d x=%d, y=%d visible=%d opacity=%d zorder=%d\n", id, index->second->Name().c_str(), width, height, x, y, visible, opacity, zorder);
-            index->second->Dimensions(visible, x, y, width, height, opacity, zorder);
-        } else {
-            // TODO: Seems this is a surface, we did not create. maybe we need to collect it in future.
-            //Trace("Unidentified surface: id=%d.\n");
-        }
-
-        _adminLock.Unlock();
-    }
-
-    void Display::Destructed(const uint32_t id)
-    {
-        _adminLock.Lock();
-
-        if (_collect != true) {
-            SurfaceMap::iterator index = _surfaces.find(id);
-
-            if (index != _surfaces.end()) {
-                // See if it is in the surfaces map, we need to take it out here as well..
-                WaylandSurfaceMap::iterator entry(_waylandSurfaces.find(index->second->_surface));
-
-                // assert(entry != _waylandSurfaces.end());
-
-                if (entry != _waylandSurfaces.end()) {
-                    entry->second->Release();
-                    _waylandSurfaces.erase(entry);
-                }
-
-                if (_keyboardReceiver == index->second) {
-                    _keyboardReceiver = nullptr;
-                }
-
-                index->second->Unlink();
-                index->second->Release();
-                _surfaces.erase(index);
-            }
-
-            if (_clientHandler != nullptr) {
-                _clientHandler->Detached(id);
-            }
-        }
-        _adminLock.Unlock();
-    }
-
-    /* static */ Display& Display::Instance(const std::string& displayName)
-    {
-        if (_runtimeDir.empty() == true) {
-            const char* envName = ::getenv("XDG_RUNTIME_DIR");
-            if (envName != nullptr) {
-                _runtimeDir = envName;
-            }
-        }
-
-        // Please define a runtime directory, or using an environment variable (XDG_RUNTIME_DIR)
-        // or by setting it before creating a Display, using Display::RuntimeDirectory(<DIR>),
-        // or by passing it as an argument to this method (none empty dir)
-        assert(_runtimeDir.empty() == false);
-
-        Display* result(nullptr);
-
-        _adminLock.Lock();
-
-        DisplayMap::iterator index(_displays.find(displayName));
-
-        if (index == _displays.end()) {
-            result = new Display(displayName);
-            _displays.insert(std::pair<const std::string, Display*>(displayName, result));
-        } else {
-            result = index->second;
-        }
-        result->AddRef();
-        _adminLock.Unlock();
-
-        assert(result != nullptr);
-
-        return (*result);
-    }
-
-    static void signalHandler(int signum)
-    {
-    }
-
-    void Display::Process(Display::IProcess* processloop)
-    {
-
-        struct sigaction sigint;
-
-        sigint.sa_handler = signalHandler;
-        sigemptyset(&sigint.sa_mask);
-        sigint.sa_flags = SA_RESETHAND;
-        sigaction(SIGINT, &sigint, nullptr);
-
-        _thread = ::pthread_self();
-
-        Trace("Setup dispatch loop using thread %p signal: %d \n", &_thread, _signal);
-        if (_display != nullptr) {
-            while ((wl_display_dispatch(_display) != -1) && (processloop->Dispatch() == true)) {
-                /* intentionally left empty */
-            }
-        }
-    }
-
-    int Display::Process(const uint32_t data)
-    {
-
-        signed int result(0);
-        _adminLock.Lock();
-        if (_display) {
-
-            while (wl_display_prepare_read(_display) != 0) {
-                if (wl_display_dispatch_pending(_display) < 0) {
-                    result = -1;
-                    break;
-                }
-            }
-
-            wl_display_flush(_display);
-
-            if (data != 0) {
-                if (wl_display_read_events(_display) < 0) {
-                    result = -2;
-                } else {
-                    if (wl_display_dispatch_pending(_display) < 0) {
-                        result = 1;
-                    }
-                }
-            } else {
-                wl_display_cancel_read(_display);
-                result = -3;
-            }
-        }
-        _adminLock.Unlock();
-        return result;
-    }
-
-    int Display::FileDescriptor() const
-    {
-        return (wl_display_get_fd(_display));
-    }
-
-    void Display::Signal()
-    {
-        printf("Received Signal, killing thread %p.\n", &_thread);
-        ::pthread_kill(_thread, SIGINT);
-    }
-}
-
-/* static */ Compositor::IDisplay* Compositor::IDisplay::Instance(const std::string& displayName)
-{
-    return (&(Wayland::Display::Instance(displayName)));
-}
-}
-- 
2.11.0

