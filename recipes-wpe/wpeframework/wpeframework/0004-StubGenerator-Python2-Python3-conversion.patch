diff --git a/Tools/ProxyStubGenerator/StubGenerator.py b/Tools/ProxyStubGenerator/StubGenerator.py
index 0f0d9bc..bef6164 100755
--- a/Tools/ProxyStubGenerator/StubGenerator.py
+++ b/Tools/ProxyStubGenerator/StubGenerator.py
@@ -43,21 +43,21 @@ class Log:
     def Info(self, text, file = ""):
         if BE_VERBOSE:
             self.infos.append("%s: INFO: %s%s%s" % (NAME, file, ": " if file else "", text))
-            print self.infos[-1]
+            print (self.infos[-1])
     def Warn(self, text, file = ""):
         if SHOW_WARNINGS:
             self.warnings.append("%s: WARNING: %s%s%s" % (NAME, file, ": " if file else "", text))
-            print self.warnings[-1]
+            print (self.warnings[-1])
     def Error(self, text, file = ""):
             self.errors.append("%s: ERROR: %s%s%s" % (NAME, file, ": " if file else "", text))
-            print >> sys.stderr, self.errors[-1]
+            print (>> sys.stderr, self.errors[-1])
     def Print(self, text, file = ""):
-        print("%s: %s%s%s" % (NAME, file, ": " if file else "", text))
+        print(("%s: %s%s%s" % (NAME, file, ": " if file else "", text)))
     def Dump(self):
             if self.errors or self.warnings or self.infos:
-                print ""
+                print ("")
                 for item in self.errors + self.warnings + self.infos:
-                    print item
+                    print (item)
 
 
 log = Log()
@@ -146,7 +146,7 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
 
     for iface in interfaces:
         if iface.id < MIN_INTERFACE_ID:
-            log.Warn("invalid interface ID %s (%s) of %s - shall be at least 0x40" % (hex(iface.id) if isinstance(iface.id, (long, int)) else "?", str(iface.id), iface.obj.full_name), source_file)
+            log.Warn("invalid interface ID %s (%s) of %s - shall be at least 0x40" % (hex(iface.id) if isinstance(iface.id, int) else "?", str(iface.id), iface.obj.full_name), source_file)
 
     if scan_only:
         return interfaces
@@ -1082,7 +1082,7 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
         if announce_list:
             emit.Line()
 
-        for key, val in announce_list.iteritems():
+        for key, val in announce_list.items():
             emit.Line("typedef ProxyStub::UnknownStubType<%s, %s> %s;" % (key, val[1], val[2]))
 
         emit.Line()
@@ -1094,7 +1094,7 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
         emit.Line("{")
         emit.IndentInc()
 
-        for key, val in announce_list.iteritems():
+        for key, val in announce_list.items():
             emit.Line("RPC::Administrator::Instance().Announce<%s, %s, %s>();" % (key, val[0], val[2]))
 
         emit.IndentDec()
@@ -1144,24 +1144,24 @@ if __name__ == "__main__":
         INTERFACE_NAMESPACE = "::" + INTERFACE_NAMESPACE
 
     if args.help_tags:
-        print "The following special tags are supported:"
-        print "   @stubgen:skip     - skip parsing of the rest of the file"
-        print "   @stubgen:omit     - omit generating code for the next item (class or method)"
-        print "   @stubgen:stub     - generate empty stub for the next item (class or method)"
-        print "For non-const pointer and reference method/function parameters:"
-        print "   @in               - denotes an input parameter"
-        print "   @out              - denotes an output parameter"
-        print "   @inout            - denotes an input/output parameter (equivalent of @in @out)"
-        print "   @length:<expr>    - specifies a buffer length value (a constant, a parameter name or a math expression)"
-        print "   @maxlength:<expr> - specifies a maximum buffer length value (a constant, a parameter name or a math expression),"
-        print "                       if not specified @length is used as maximum length, use round parenthesis for expressions,"
-        print "                       e.g.: @length:bufferSize @length:(width*height*4)"
-        print ""
-        print "The tags shall be placed inside comments."
+        print ("The following special tags are supported:")
+        print ("   @stubgen:skip     - skip parsing of the rest of the file")
+        print ("   @stubgen:omit     - omit generating code for the next item (class or method)")
+        print ("   @stubgen:stub     - generate empty stub for the next item (class or method)")
+        print ("For non-const pointer and reference method/function parameters:")
+        print ("   @in               - denotes an input parameter")
+        print ("   @out              - denotes an output parameter")
+        print ("   @inout            - denotes an input/output parameter (equivalent of @in @out)")
+        print ("   @length:<expr>    - specifies a buffer length value (a constant, a parameter name or a math expression)")
+        print ("   @maxlength:<expr> - specifies a maximum buffer length value (a constant, a parameter name or a math expression),")
+        print ("                       if not specified @length is used as maximum length, use round parenthesis for expressions,")
+        print ("                       e.g.: @length:bufferSize @length:(width*height*4)")
+        print ("")
+        print ("The tags shall be placed inside comments.")
         sys.exit()
 
     if args.show_version:
-        print "Version: " + VERSION
+        print ("Version: " + VERSION)
         sys.exit()
 
     if not args.path:
@@ -1191,7 +1191,7 @@ if __name__ == "__main__":
                     # dump interfaces if only scanning
                     for f in sorted(output, key=lambda x: x.id):
                         if scan_only:
-                            print f.id, f.obj.full_name
+                            print (f.id, f.obj.full_name)
 
                 except SkipFileError as err:
                     log.Print("skipped file '%s'" % err)
@@ -1206,23 +1206,23 @@ if __name__ == "__main__":
                     log.Error(err)
 
             if scan_only:
-                print "\nInterface dump:"
+                print ("\nInterface dump:")
 
             sorted_faces = sorted(faces, key=lambda x: x.id)
             for i, f in enumerate(sorted_faces):
                 if isinstance(f.id, (long, int)):
                     if scan_only:
                         if i and sorted_faces[i - 1].id < f.id - 1:
-                            print "..."
-                        print "%s (%s) - '%s'" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name)
+                            print ("...")
+                        print ("%s (%s) - '%s'" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name))
                     if i and sorted_faces[i - 1].id == f.id:
-                        log.Warn("duplicate interface ID %s (%s) of %s" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name), f.file)
+                        log.Warn("duplicate interface ID %s (%s) of %s" % (hex(f.id) if isinstance(f.id, int) else "?", str(f.id), f.obj.full_name), f.file)    
                 else:
                     log.Info("can't evaluate interface ID \"%s\" of %s" % (str(f.id), f.obj.full_name), f.file)
 
 
             if len(interface_files) > 1 and BE_VERBOSE:
-                print ""
+                print ("")
 
             log.Print(("all done; %i file%s processed" % (len(interface_files) - len(skipped), "s" if len(interface_files) - len(skipped) > 1 else "")) + \
                 ((" (%i file%s skipped)" % (len(skipped), "s" if len(skipped) > 1 else "")) if skipped else "") + \
