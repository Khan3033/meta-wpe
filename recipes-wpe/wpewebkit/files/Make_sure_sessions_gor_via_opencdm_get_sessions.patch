From d8ceeab948a54ec59a840b2d3edf5a1183ca2337 Mon Sep 17 00:00:00 2001
From: Pawel Stanek <p.stanek@metrological.com>
Date: Tue, 9 Apr 2019 19:09:40 +0200
Subject: [PATCH] [EME][OCDM] Make sure sessions gor via opencdm_get_sessions()
 are released properly.

---
 .../WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.cpp  | 5 -----
 Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.h | 5 +++++
 .../gstreamer/eme/WebKitOpenCDMDecryptorGStreamer.cpp       | 6 +++---
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.cpp
index d07b6dd7e1e8..9e0c71b3db0a 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.cpp
@@ -211,11 +211,6 @@ class CDMInstanceOpenCDM::Session : public ThreadSafeRefCounted<CDMInstanceOpenC
     }
 
 private:
-    struct SessionDeleter {
-        OpenCDMError operator()(OpenCDMSession* ptr) const { return opencdm_destruct_session(ptr); }
-    };
-    using ScopedSession = std::unique_ptr<OpenCDMSession, SessionDeleter>;
-
     Session() = delete;
     Session(OpenCDMAccessor&, const String&, const char*, Ref<WebCore::SharedBuffer>&&, LicenseType, Ref<WebCore::SharedBuffer>&&);
     void challengeGeneratedCallback(RefPtr<SharedBuffer>&&) override;
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.h b/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.h
index 97adc2f4e955..f8dc0d96c040 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.h
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/CDMOpenCDM.h
@@ -41,6 +41,11 @@ struct OCDMAccessorDeleter {
 
 using ScopedOCDMAccessor = std::unique_ptr<OpenCDMAccessor, OCDMAccessorDeleter>;
 
+struct SessionDeleter {
+    OpenCDMError operator()(OpenCDMSession* ptr) const { return opencdm_destruct_session(ptr); }
+};
+using ScopedSession = std::unique_ptr<OpenCDMSession, SessionDeleter>;
+
 class CDMFactoryOpenCDM : public CDMFactory {
 private:
     CDMFactoryOpenCDM()
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitOpenCDMDecryptorGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitOpenCDMDecryptorGStreamer.cpp
index 8651a80773dc..cbabcb9db874 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitOpenCDMDecryptorGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitOpenCDMDecryptorGStreamer.cpp
@@ -40,7 +40,7 @@ using WebCore::GstMappedBuffer;
 struct _WebKitOpenCDMDecryptPrivate {
     String m_session;
     WebCore::ScopedOCDMAccessor m_openCdmAccessor;
-    OpenCDMSession* m_openCdm;
+    WebCore::ScopedSession m_openCdm;
     Lock m_mutex;
 };
 
@@ -204,7 +204,7 @@ static bool webKitMediaOpenCDMDecryptorDecrypt(WebKitMediaCommonEncryptionDecryp
     }
 
     if (!priv->m_openCdm) {
-        priv->m_openCdm = opencdm_get_session(priv->m_openCdmAccessor.get(), mappedKeyID.data(), mappedKeyID.size(), WEBCORE_GSTREAMER_EME_LICENSE_KEY_RESPONSE_TIMEOUT.millisecondsAs<uint32_t>());
+        priv->m_openCdm.reset(opencdm_get_session(priv->m_openCdmAccessor.get(), mappedKeyID.data(), mappedKeyID.size(), WEBCORE_GSTREAMER_EME_LICENSE_KEY_RESPONSE_TIMEOUT.millisecondsAs<uint32_t>()));
         if (!priv->m_openCdm) {
             GST_ERROR_OBJECT(self, "session is empty or unusable");
             return false;
@@ -213,7 +213,7 @@ static bool webKitMediaOpenCDMDecryptorDecrypt(WebKitMediaCommonEncryptionDecryp
 
     // Decrypt cipher.
     GST_TRACE_OBJECT(self, "decrypting");
-    if (int errorCode = adapter_session_decrypt(priv->m_openCdm, reinterpret_cast<void*>(buffer), reinterpret_cast<void*>(subSamplesBuffer), subSampleCount, mappedIV.data(), static_cast<uint32_t>(mappedIV.size()))) {
+    if (int errorCode = adapter_session_decrypt(priv->m_openCdm.get(), reinterpret_cast<void*>(buffer), reinterpret_cast<void*>(subSamplesBuffer), subSampleCount, mappedIV.data(), static_cast<uint32_t>(mappedIV.size()))) {
         GST_ERROR_OBJECT(self, "subsample decryption failed, error code %d", errorCode);
         return false;
     }
